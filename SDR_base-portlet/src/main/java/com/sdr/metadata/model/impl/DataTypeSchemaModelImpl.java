package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.DataTypeSchema;
import com.sdr.metadata.model.DataTypeSchemaModel;
import com.sdr.metadata.model.DataTypeSchemaSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataTypeSchema service. Represents a row in the &quot;sdr_DataTypeSchema&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.DataTypeSchemaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeSchemaImpl}.
 * </p>
 *
 * @author jaesung
 * @see DataTypeSchemaImpl
 * @see com.sdr.metadata.model.DataTypeSchema
 * @see com.sdr.metadata.model.DataTypeSchemaModel
 * @generated
 */
@JSON(strict = true)
public class DataTypeSchemaModelImpl extends BaseModelImpl<DataTypeSchema>
    implements DataTypeSchemaModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a data type schema model instance should use the {@link com.sdr.metadata.model.DataTypeSchema} interface instead.
     */
    public static final String TABLE_NAME = "sdr_DataTypeSchema";
    public static final Object[][] TABLE_COLUMNS = {
            { "dataTypeSchemaId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "reference", Types.VARCHAR },
            { "variableType", Types.VARCHAR },
            { "variableUnit", Types.VARCHAR },
            { "essential", Types.BOOLEAN },
            { "minimum", Types.DOUBLE },
            { "maximum", Types.DOUBLE },
            { "enums", Types.VARCHAR },
            { "pattern", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "userId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "createUserId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "status", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_DataTypeSchema (dataTypeSchemaId LONG not null primary key,title VARCHAR(200) null,reference VARCHAR(75) null,variableType VARCHAR(75) null,variableUnit VARCHAR(75) null,essential BOOLEAN null,minimum DOUBLE null,maximum DOUBLE null,enums VARCHAR(75) null,pattern VARCHAR(75) null,description VARCHAR(2000) null,userId LONG,groupId LONG,companyId LONG,createUserId LONG,createDate DATE null,modifiedDate DATE null,status INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table sdr_DataTypeSchema";
    public static final String ORDER_BY_JPQL = " ORDER BY dataTypeSchema.dataTypeSchemaId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_DataTypeSchema.dataTypeSchemaId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.DataTypeSchema"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.DataTypeSchema"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.DataTypeSchema"),
            true);
    public static long STATUS_COLUMN_BITMASK = 1L;
    public static long VARIABLETYPE_COLUMN_BITMASK = 2L;
    public static long DATATYPESCHEMAID_COLUMN_BITMASK = 4L;
    public static final String MAPPING_TABLE_SDR_DATATYPE_DATATYPESCHEMA_NAME = "sdr_DataType_dataTypeSchema";
    public static final Object[][] MAPPING_TABLE_SDR_DATATYPE_DATATYPESCHEMA_COLUMNS =
        {
            { "dataTypeId", Types.BIGINT },
            { "dataTypeSchemaId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_SDR_DATATYPE_DATATYPESCHEMA_SQL_CREATE =
        "create table sdr_DataType_dataTypeSchema (dataTypeId LONG not null,dataTypeSchemaId LONG not null,primary key (dataTypeId, dataTypeSchemaId))";
    public static final boolean FINDER_CACHE_ENABLED_SDR_DATATYPE_DATATYPESCHEMA =
        GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.sdr_DataType_dataTypeSchema"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.DataTypeSchema"));
    private static ClassLoader _classLoader = DataTypeSchema.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DataTypeSchema.class
        };
    private long _dataTypeSchemaId;
    private String _title;
    private String _reference;
    private String _variableType;
    private String _originalVariableType;
    private String _variableUnit;
    private Boolean _essential;
    private Double _minimum;
    private Double _maximum;
    private String _enums;
    private String _pattern;
    private String _description;
    private long _userId;
    private String _userUuid;
    private long _groupId;
    private long _companyId;
    private long _createUserId;
    private String _createUserUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private int _status;
    private int _originalStatus;
    private boolean _setOriginalStatus;
    private long _columnBitmask;
    private DataTypeSchema _escapedModel;

    public DataTypeSchemaModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DataTypeSchema toModel(DataTypeSchemaSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        DataTypeSchema model = new DataTypeSchemaImpl();

        model.setDataTypeSchemaId(soapModel.getDataTypeSchemaId());
        model.setTitle(soapModel.getTitle());
        model.setReference(soapModel.getReference());
        model.setVariableType(soapModel.getVariableType());
        model.setVariableUnit(soapModel.getVariableUnit());
        model.setEssential(soapModel.getEssential());
        model.setMinimum(soapModel.getMinimum());
        model.setMaximum(soapModel.getMaximum());
        model.setEnums(soapModel.getEnums());
        model.setPattern(soapModel.getPattern());
        model.setDescription(soapModel.getDescription());
        model.setUserId(soapModel.getUserId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setCreateUserId(soapModel.getCreateUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setStatus(soapModel.getStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DataTypeSchema> toModels(DataTypeSchemaSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<DataTypeSchema> models = new ArrayList<DataTypeSchema>(soapModels.length);

        for (DataTypeSchemaSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _dataTypeSchemaId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDataTypeSchemaId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _dataTypeSchemaId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return DataTypeSchema.class;
    }

    @Override
    public String getModelClassName() {
        return DataTypeSchema.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dataTypeSchemaId", getDataTypeSchemaId());
        attributes.put("title", getTitle());
        attributes.put("reference", getReference());
        attributes.put("variableType", getVariableType());
        attributes.put("variableUnit", getVariableUnit());
        attributes.put("essential", getEssential());
        attributes.put("minimum", getMinimum());
        attributes.put("maximum", getMaximum());
        attributes.put("enums", getEnums());
        attributes.put("pattern", getPattern());
        attributes.put("description", getDescription());
        attributes.put("userId", getUserId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("createUserId", getCreateUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long dataTypeSchemaId = (Long) attributes.get("dataTypeSchemaId");

        if (dataTypeSchemaId != null) {
            setDataTypeSchemaId(dataTypeSchemaId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String reference = (String) attributes.get("reference");

        if (reference != null) {
            setReference(reference);
        }

        String variableType = (String) attributes.get("variableType");

        if (variableType != null) {
            setVariableType(variableType);
        }

        String variableUnit = (String) attributes.get("variableUnit");

        if (variableUnit != null) {
            setVariableUnit(variableUnit);
        }

        Boolean essential = (Boolean) attributes.get("essential");

        if (essential != null) {
            setEssential(essential);
        }

        Double minimum = (Double) attributes.get("minimum");

        if (minimum != null) {
            setMinimum(minimum);
        }

        Double maximum = (Double) attributes.get("maximum");

        if (maximum != null) {
            setMaximum(maximum);
        }

        String enums = (String) attributes.get("enums");

        if (enums != null) {
            setEnums(enums);
        }

        String pattern = (String) attributes.get("pattern");

        if (pattern != null) {
            setPattern(pattern);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long createUserId = (Long) attributes.get("createUserId");

        if (createUserId != null) {
            setCreateUserId(createUserId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @JSON
    @Override
    public long getDataTypeSchemaId() {
        return _dataTypeSchemaId;
    }

    @Override
    public void setDataTypeSchemaId(long dataTypeSchemaId) {
        _dataTypeSchemaId = dataTypeSchemaId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getReference() {
        if (_reference == null) {
            return StringPool.BLANK;
        } else {
            return _reference;
        }
    }

    @Override
    public void setReference(String reference) {
        _reference = reference;
    }

    @JSON
    @Override
    public String getVariableType() {
        if (_variableType == null) {
            return StringPool.BLANK;
        } else {
            return _variableType;
        }
    }

    @Override
    public void setVariableType(String variableType) {
        _columnBitmask |= VARIABLETYPE_COLUMN_BITMASK;

        if (_originalVariableType == null) {
            _originalVariableType = _variableType;
        }

        _variableType = variableType;
    }

    public String getOriginalVariableType() {
        return GetterUtil.getString(_originalVariableType);
    }

    @JSON
    @Override
    public String getVariableUnit() {
        if (_variableUnit == null) {
            return StringPool.BLANK;
        } else {
            return _variableUnit;
        }
    }

    @Override
    public void setVariableUnit(String variableUnit) {
        _variableUnit = variableUnit;
    }

    @JSON
    @Override
    public Boolean getEssential() {
        return _essential;
    }

    @Override
    public void setEssential(Boolean essential) {
        _essential = essential;
    }

    @JSON
    @Override
    public Double getMinimum() {
        return _minimum;
    }

    @Override
    public void setMinimum(Double minimum) {
        _minimum = minimum;
    }

    @JSON
    @Override
    public Double getMaximum() {
        return _maximum;
    }

    @Override
    public void setMaximum(Double maximum) {
        _maximum = maximum;
    }

    @JSON
    @Override
    public String getEnums() {
        if (_enums == null) {
            return StringPool.BLANK;
        } else {
            return _enums;
        }
    }

    @Override
    public void setEnums(String enums) {
        _enums = enums;
    }

    @JSON
    @Override
    public String getPattern() {
        if (_pattern == null) {
            return StringPool.BLANK;
        } else {
            return _pattern;
        }
    }

    @Override
    public void setPattern(String pattern) {
        _pattern = pattern;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getCreateUserId() {
        return _createUserId;
    }

    @Override
    public void setCreateUserId(long createUserId) {
        _createUserId = createUserId;
    }

    @Override
    public String getCreateUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getCreateUserId(), "uuid",
            _createUserUuid);
    }

    @Override
    public void setCreateUserUuid(String createUserUuid) {
        _createUserUuid = createUserUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public int getOriginalStatus() {
        return _originalStatus;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            DataTypeSchema.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public DataTypeSchema toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DataTypeSchema) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DataTypeSchemaImpl dataTypeSchemaImpl = new DataTypeSchemaImpl();

        dataTypeSchemaImpl.setDataTypeSchemaId(getDataTypeSchemaId());
        dataTypeSchemaImpl.setTitle(getTitle());
        dataTypeSchemaImpl.setReference(getReference());
        dataTypeSchemaImpl.setVariableType(getVariableType());
        dataTypeSchemaImpl.setVariableUnit(getVariableUnit());
        dataTypeSchemaImpl.setEssential(getEssential());
        dataTypeSchemaImpl.setMinimum(getMinimum());
        dataTypeSchemaImpl.setMaximum(getMaximum());
        dataTypeSchemaImpl.setEnums(getEnums());
        dataTypeSchemaImpl.setPattern(getPattern());
        dataTypeSchemaImpl.setDescription(getDescription());
        dataTypeSchemaImpl.setUserId(getUserId());
        dataTypeSchemaImpl.setGroupId(getGroupId());
        dataTypeSchemaImpl.setCompanyId(getCompanyId());
        dataTypeSchemaImpl.setCreateUserId(getCreateUserId());
        dataTypeSchemaImpl.setCreateDate(getCreateDate());
        dataTypeSchemaImpl.setModifiedDate(getModifiedDate());
        dataTypeSchemaImpl.setStatus(getStatus());

        dataTypeSchemaImpl.resetOriginalValues();

        return dataTypeSchemaImpl;
    }

    @Override
    public int compareTo(DataTypeSchema dataTypeSchema) {
        long primaryKey = dataTypeSchema.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DataTypeSchema)) {
            return false;
        }

        DataTypeSchema dataTypeSchema = (DataTypeSchema) obj;

        long primaryKey = dataTypeSchema.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DataTypeSchemaModelImpl dataTypeSchemaModelImpl = this;

        dataTypeSchemaModelImpl._originalVariableType = dataTypeSchemaModelImpl._variableType;

        dataTypeSchemaModelImpl._originalStatus = dataTypeSchemaModelImpl._status;

        dataTypeSchemaModelImpl._setOriginalStatus = false;

        dataTypeSchemaModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<DataTypeSchema> toCacheModel() {
        DataTypeSchemaCacheModel dataTypeSchemaCacheModel = new DataTypeSchemaCacheModel();

        dataTypeSchemaCacheModel.dataTypeSchemaId = getDataTypeSchemaId();

        dataTypeSchemaCacheModel.title = getTitle();

        String title = dataTypeSchemaCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            dataTypeSchemaCacheModel.title = null;
        }

        dataTypeSchemaCacheModel.reference = getReference();

        String reference = dataTypeSchemaCacheModel.reference;

        if ((reference != null) && (reference.length() == 0)) {
            dataTypeSchemaCacheModel.reference = null;
        }

        dataTypeSchemaCacheModel.variableType = getVariableType();

        String variableType = dataTypeSchemaCacheModel.variableType;

        if ((variableType != null) && (variableType.length() == 0)) {
            dataTypeSchemaCacheModel.variableType = null;
        }

        dataTypeSchemaCacheModel.variableUnit = getVariableUnit();

        String variableUnit = dataTypeSchemaCacheModel.variableUnit;

        if ((variableUnit != null) && (variableUnit.length() == 0)) {
            dataTypeSchemaCacheModel.variableUnit = null;
        }

        dataTypeSchemaCacheModel.essential = getEssential();

        dataTypeSchemaCacheModel.minimum = getMinimum();

        dataTypeSchemaCacheModel.maximum = getMaximum();

        dataTypeSchemaCacheModel.enums = getEnums();

        String enums = dataTypeSchemaCacheModel.enums;

        if ((enums != null) && (enums.length() == 0)) {
            dataTypeSchemaCacheModel.enums = null;
        }

        dataTypeSchemaCacheModel.pattern = getPattern();

        String pattern = dataTypeSchemaCacheModel.pattern;

        if ((pattern != null) && (pattern.length() == 0)) {
            dataTypeSchemaCacheModel.pattern = null;
        }

        dataTypeSchemaCacheModel.description = getDescription();

        String description = dataTypeSchemaCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            dataTypeSchemaCacheModel.description = null;
        }

        dataTypeSchemaCacheModel.userId = getUserId();

        dataTypeSchemaCacheModel.groupId = getGroupId();

        dataTypeSchemaCacheModel.companyId = getCompanyId();

        dataTypeSchemaCacheModel.createUserId = getCreateUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            dataTypeSchemaCacheModel.createDate = createDate.getTime();
        } else {
            dataTypeSchemaCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            dataTypeSchemaCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            dataTypeSchemaCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        dataTypeSchemaCacheModel.status = getStatus();

        return dataTypeSchemaCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(37);

        sb.append("{dataTypeSchemaId=");
        sb.append(getDataTypeSchemaId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", reference=");
        sb.append(getReference());
        sb.append(", variableType=");
        sb.append(getVariableType());
        sb.append(", variableUnit=");
        sb.append(getVariableUnit());
        sb.append(", essential=");
        sb.append(getEssential());
        sb.append(", minimum=");
        sb.append(getMinimum());
        sb.append(", maximum=");
        sb.append(getMaximum());
        sb.append(", enums=");
        sb.append(getEnums());
        sb.append(", pattern=");
        sb.append(getPattern());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", createUserId=");
        sb.append(getCreateUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(58);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.DataTypeSchema");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dataTypeSchemaId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeSchemaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>reference</column-name><column-value><![CDATA[");
        sb.append(getReference());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>variableType</column-name><column-value><![CDATA[");
        sb.append(getVariableType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>variableUnit</column-name><column-value><![CDATA[");
        sb.append(getVariableUnit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>essential</column-name><column-value><![CDATA[");
        sb.append(getEssential());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>minimum</column-name><column-value><![CDATA[");
        sb.append(getMinimum());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>maximum</column-name><column-value><![CDATA[");
        sb.append(getMaximum());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>enums</column-name><column-value><![CDATA[");
        sb.append(getEnums());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pattern</column-name><column-value><![CDATA[");
        sb.append(getPattern());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createUserId</column-name><column-value><![CDATA[");
        sb.append(getCreateUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
