package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.GroupRule;
import com.sdr.metadata.model.GroupRuleModel;
import com.sdr.metadata.model.GroupRuleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GroupRule service. Represents a row in the &quot;sdr_GroupRule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.GroupRuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GroupRuleImpl}.
 * </p>
 *
 * @author jaesung
 * @see GroupRuleImpl
 * @see com.sdr.metadata.model.GroupRule
 * @see com.sdr.metadata.model.GroupRuleModel
 * @generated
 */
@JSON(strict = true)
public class GroupRuleModelImpl extends BaseModelImpl<GroupRule>
    implements GroupRuleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a group rule model instance should use the {@link com.sdr.metadata.model.GroupRule} interface instead.
     */
    public static final String TABLE_NAME = "sdr_GroupRule";
    public static final Object[][] TABLE_COLUMNS = {
            { "grId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "rule", Types.VARCHAR },
            { "viewAttr", Types.VARCHAR },
            { "mergeAttr", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_GroupRule (grId LONG not null primary key,title VARCHAR(75) null,description VARCHAR(2000) null,rule VARCHAR(75) null,viewAttr VARCHAR(75) null,mergeAttr VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table sdr_GroupRule";
    public static final String ORDER_BY_JPQL = " ORDER BY groupRule.grId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_GroupRule.grId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.GroupRule"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.GroupRule"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.GroupRule"));
    private static ClassLoader _classLoader = GroupRule.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            GroupRule.class
        };
    private long _grId;
    private String _title;
    private String _description;
    private String _rule;
    private String _viewAttr;
    private String _mergeAttr;
    private GroupRule _escapedModel;

    public GroupRuleModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static GroupRule toModel(GroupRuleSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        GroupRule model = new GroupRuleImpl();

        model.setGrId(soapModel.getGrId());
        model.setTitle(soapModel.getTitle());
        model.setDescription(soapModel.getDescription());
        model.setRule(soapModel.getRule());
        model.setViewAttr(soapModel.getViewAttr());
        model.setMergeAttr(soapModel.getMergeAttr());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<GroupRule> toModels(GroupRuleSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<GroupRule> models = new ArrayList<GroupRule>(soapModels.length);

        for (GroupRuleSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _grId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setGrId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _grId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return GroupRule.class;
    }

    @Override
    public String getModelClassName() {
        return GroupRule.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("grId", getGrId());
        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("rule", getRule());
        attributes.put("viewAttr", getViewAttr());
        attributes.put("mergeAttr", getMergeAttr());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long grId = (Long) attributes.get("grId");

        if (grId != null) {
            setGrId(grId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String rule = (String) attributes.get("rule");

        if (rule != null) {
            setRule(rule);
        }

        String viewAttr = (String) attributes.get("viewAttr");

        if (viewAttr != null) {
            setViewAttr(viewAttr);
        }

        String mergeAttr = (String) attributes.get("mergeAttr");

        if (mergeAttr != null) {
            setMergeAttr(mergeAttr);
        }
    }

    @JSON
    @Override
    public long getGrId() {
        return _grId;
    }

    @Override
    public void setGrId(long grId) {
        _grId = grId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getRule() {
        if (_rule == null) {
            return StringPool.BLANK;
        } else {
            return _rule;
        }
    }

    @Override
    public void setRule(String rule) {
        _rule = rule;
    }

    @JSON
    @Override
    public String getViewAttr() {
        if (_viewAttr == null) {
            return StringPool.BLANK;
        } else {
            return _viewAttr;
        }
    }

    @Override
    public void setViewAttr(String viewAttr) {
        _viewAttr = viewAttr;
    }

    @JSON
    @Override
    public String getMergeAttr() {
        if (_mergeAttr == null) {
            return StringPool.BLANK;
        } else {
            return _mergeAttr;
        }
    }

    @Override
    public void setMergeAttr(String mergeAttr) {
        _mergeAttr = mergeAttr;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            GroupRule.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public GroupRule toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (GroupRule) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        GroupRuleImpl groupRuleImpl = new GroupRuleImpl();

        groupRuleImpl.setGrId(getGrId());
        groupRuleImpl.setTitle(getTitle());
        groupRuleImpl.setDescription(getDescription());
        groupRuleImpl.setRule(getRule());
        groupRuleImpl.setViewAttr(getViewAttr());
        groupRuleImpl.setMergeAttr(getMergeAttr());

        groupRuleImpl.resetOriginalValues();

        return groupRuleImpl;
    }

    @Override
    public int compareTo(GroupRule groupRule) {
        long primaryKey = groupRule.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof GroupRule)) {
            return false;
        }

        GroupRule groupRule = (GroupRule) obj;

        long primaryKey = groupRule.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<GroupRule> toCacheModel() {
        GroupRuleCacheModel groupRuleCacheModel = new GroupRuleCacheModel();

        groupRuleCacheModel.grId = getGrId();

        groupRuleCacheModel.title = getTitle();

        String title = groupRuleCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            groupRuleCacheModel.title = null;
        }

        groupRuleCacheModel.description = getDescription();

        String description = groupRuleCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            groupRuleCacheModel.description = null;
        }

        groupRuleCacheModel.rule = getRule();

        String rule = groupRuleCacheModel.rule;

        if ((rule != null) && (rule.length() == 0)) {
            groupRuleCacheModel.rule = null;
        }

        groupRuleCacheModel.viewAttr = getViewAttr();

        String viewAttr = groupRuleCacheModel.viewAttr;

        if ((viewAttr != null) && (viewAttr.length() == 0)) {
            groupRuleCacheModel.viewAttr = null;
        }

        groupRuleCacheModel.mergeAttr = getMergeAttr();

        String mergeAttr = groupRuleCacheModel.mergeAttr;

        if ((mergeAttr != null) && (mergeAttr.length() == 0)) {
            groupRuleCacheModel.mergeAttr = null;
        }

        return groupRuleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{grId=");
        sb.append(getGrId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", rule=");
        sb.append(getRule());
        sb.append(", viewAttr=");
        sb.append(getViewAttr());
        sb.append(", mergeAttr=");
        sb.append(getMergeAttr());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.GroupRule");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>grId</column-name><column-value><![CDATA[");
        sb.append(getGrId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>rule</column-name><column-value><![CDATA[");
        sb.append(getRule());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>viewAttr</column-name><column-value><![CDATA[");
        sb.append(getViewAttr());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mergeAttr</column-name><column-value><![CDATA[");
        sb.append(getMergeAttr());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
