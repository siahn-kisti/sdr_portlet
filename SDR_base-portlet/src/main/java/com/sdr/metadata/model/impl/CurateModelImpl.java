package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.Curate;
import com.sdr.metadata.model.CurateModel;
import com.sdr.metadata.model.CurateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Curate service. Represents a row in the &quot;sdr_Curate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.CurateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CurateImpl}.
 * </p>
 *
 * @author jaesung
 * @see CurateImpl
 * @see com.sdr.metadata.model.Curate
 * @see com.sdr.metadata.model.CurateModel
 * @generated
 */
@JSON(strict = true)
public class CurateModelImpl extends BaseModelImpl<Curate>
    implements CurateModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a curate model instance should use the {@link com.sdr.metadata.model.Curate} interface instead.
     */
    public static final String TABLE_NAME = "sdr_Curate";
    public static final Object[][] TABLE_COLUMNS = {
            { "curateId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "endDate", Types.TIMESTAMP },
            { "log_", Types.VARCHAR },
            { "datasetId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_Curate (curateId LONG not null primary key,title VARCHAR(200) null,createDate DATE null,endDate DATE null,log_ TEXT null,datasetId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table sdr_Curate";
    public static final String ORDER_BY_JPQL = " ORDER BY curate.curateId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_Curate.curateId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.Curate"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.Curate"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.Curate"),
            true);
    public static long DATASETID_COLUMN_BITMASK = 1L;
    public static long CURATEID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.Curate"));
    private static ClassLoader _classLoader = Curate.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Curate.class };
    private long _curateId;
    private String _title;
    private Date _createDate;
    private Date _endDate;
    private String _log;
    private long _datasetId;
    private long _originalDatasetId;
    private boolean _setOriginalDatasetId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private long _columnBitmask;
    private Curate _escapedModel;

    public CurateModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Curate toModel(CurateSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Curate model = new CurateImpl();

        model.setCurateId(soapModel.getCurateId());
        model.setTitle(soapModel.getTitle());
        model.setCreateDate(soapModel.getCreateDate());
        model.setEndDate(soapModel.getEndDate());
        model.setLog(soapModel.getLog());
        model.setDatasetId(soapModel.getDatasetId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Curate> toModels(CurateSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Curate> models = new ArrayList<Curate>(soapModels.length);

        for (CurateSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _curateId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCurateId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _curateId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Curate.class;
    }

    @Override
    public String getModelClassName() {
        return Curate.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("curateId", getCurateId());
        attributes.put("title", getTitle());
        attributes.put("createDate", getCreateDate());
        attributes.put("endDate", getEndDate());
        attributes.put("log", getLog());
        attributes.put("datasetId", getDatasetId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long curateId = (Long) attributes.get("curateId");

        if (curateId != null) {
            setCurateId(curateId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date endDate = (Date) attributes.get("endDate");

        if (endDate != null) {
            setEndDate(endDate);
        }

        String log = (String) attributes.get("log");

        if (log != null) {
            setLog(log);
        }

        Long datasetId = (Long) attributes.get("datasetId");

        if (datasetId != null) {
            setDatasetId(datasetId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }
    }

    @JSON
    @Override
    public long getCurateId() {
        return _curateId;
    }

    @Override
    public void setCurateId(long curateId) {
        _curateId = curateId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getEndDate() {
        return _endDate;
    }

    @Override
    public void setEndDate(Date endDate) {
        _endDate = endDate;
    }

    @JSON
    @Override
    public String getLog() {
        if (_log == null) {
            return StringPool.BLANK;
        } else {
            return _log;
        }
    }

    @Override
    public void setLog(String log) {
        _log = log;
    }

    @JSON
    @Override
    public long getDatasetId() {
        return _datasetId;
    }

    @Override
    public void setDatasetId(long datasetId) {
        _columnBitmask |= DATASETID_COLUMN_BITMASK;

        if (!_setOriginalDatasetId) {
            _setOriginalDatasetId = true;

            _originalDatasetId = _datasetId;
        }

        _datasetId = datasetId;
    }

    public long getOriginalDatasetId() {
        return _originalDatasetId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Curate.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Curate toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Curate) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CurateImpl curateImpl = new CurateImpl();

        curateImpl.setCurateId(getCurateId());
        curateImpl.setTitle(getTitle());
        curateImpl.setCreateDate(getCreateDate());
        curateImpl.setEndDate(getEndDate());
        curateImpl.setLog(getLog());
        curateImpl.setDatasetId(getDatasetId());
        curateImpl.setGroupId(getGroupId());
        curateImpl.setCompanyId(getCompanyId());
        curateImpl.setUserId(getUserId());
        curateImpl.setUserName(getUserName());

        curateImpl.resetOriginalValues();

        return curateImpl;
    }

    @Override
    public int compareTo(Curate curate) {
        long primaryKey = curate.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Curate)) {
            return false;
        }

        Curate curate = (Curate) obj;

        long primaryKey = curate.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CurateModelImpl curateModelImpl = this;

        curateModelImpl._originalDatasetId = curateModelImpl._datasetId;

        curateModelImpl._setOriginalDatasetId = false;

        curateModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Curate> toCacheModel() {
        CurateCacheModel curateCacheModel = new CurateCacheModel();

        curateCacheModel.curateId = getCurateId();

        curateCacheModel.title = getTitle();

        String title = curateCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            curateCacheModel.title = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            curateCacheModel.createDate = createDate.getTime();
        } else {
            curateCacheModel.createDate = Long.MIN_VALUE;
        }

        Date endDate = getEndDate();

        if (endDate != null) {
            curateCacheModel.endDate = endDate.getTime();
        } else {
            curateCacheModel.endDate = Long.MIN_VALUE;
        }

        curateCacheModel.log = getLog();

        String log = curateCacheModel.log;

        if ((log != null) && (log.length() == 0)) {
            curateCacheModel.log = null;
        }

        curateCacheModel.datasetId = getDatasetId();

        curateCacheModel.groupId = getGroupId();

        curateCacheModel.companyId = getCompanyId();

        curateCacheModel.userId = getUserId();

        curateCacheModel.userName = getUserName();

        String userName = curateCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            curateCacheModel.userName = null;
        }

        return curateCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{curateId=");
        sb.append(getCurateId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", endDate=");
        sb.append(getEndDate());
        sb.append(", log=");
        sb.append(getLog());
        sb.append(", datasetId=");
        sb.append(getDatasetId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.Curate");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>curateId</column-name><column-value><![CDATA[");
        sb.append(getCurateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>endDate</column-name><column-value><![CDATA[");
        sb.append(getEndDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>log</column-name><column-value><![CDATA[");
        sb.append(getLog());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>datasetId</column-name><column-value><![CDATA[");
        sb.append(getDatasetId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
