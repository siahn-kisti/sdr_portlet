package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.MlGuiParameter;
import com.sdr.metadata.model.MlGuiParameterModel;
import com.sdr.metadata.model.MlGuiParameterSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MlGuiParameter service. Represents a row in the &quot;sdr_MlGuiParameter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.MlGuiParameterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MlGuiParameterImpl}.
 * </p>
 *
 * @author jaesung
 * @see MlGuiParameterImpl
 * @see com.sdr.metadata.model.MlGuiParameter
 * @see com.sdr.metadata.model.MlGuiParameterModel
 * @generated
 */
@JSON(strict = true)
public class MlGuiParameterModelImpl extends BaseModelImpl<MlGuiParameter>
    implements MlGuiParameterModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a ml gui parameter model instance should use the {@link com.sdr.metadata.model.MlGuiParameter} interface instead.
     */
    public static final String TABLE_NAME = "sdr_MlGuiParameter";
    public static final Object[][] TABLE_COLUMNS = {
            { "mlGuiParameterId", Types.BIGINT },
            { "parentId", Types.BIGINT },
            { "kind", Types.VARCHAR },
            { "displayName", Types.VARCHAR },
            { "valueType", Types.VARCHAR },
            { "value", Types.VARCHAR },
            { "image", Types.VARCHAR },
            { "option_", Types.VARCHAR },
            { "description", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_MlGuiParameter (mlGuiParameterId LONG not null primary key,parentId LONG,kind VARCHAR(75) null,displayName VARCHAR(75) null,valueType VARCHAR(75) null,value VARCHAR(75) null,image VARCHAR(75) null,option_ VARCHAR(2000) null,description VARCHAR(2000) null)";
    public static final String TABLE_SQL_DROP = "drop table sdr_MlGuiParameter";
    public static final String ORDER_BY_JPQL = " ORDER BY mlGuiParameter.mlGuiParameterId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_MlGuiParameter.mlGuiParameterId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.MlGuiParameter"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.MlGuiParameter"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.MlGuiParameter"),
            true);
    public static long KIND_COLUMN_BITMASK = 1L;
    public static long PARENTID_COLUMN_BITMASK = 2L;
    public static long MLGUIPARAMETERID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.MlGuiParameter"));
    private static ClassLoader _classLoader = MlGuiParameter.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            MlGuiParameter.class
        };
    private long _mlGuiParameterId;
    private long _parentId;
    private long _originalParentId;
    private boolean _setOriginalParentId;
    private String _kind;
    private String _originalKind;
    private String _displayName;
    private String _valueType;
    private String _value;
    private String _image;
    private String _option;
    private String _description;
    private long _columnBitmask;
    private MlGuiParameter _escapedModel;

    public MlGuiParameterModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static MlGuiParameter toModel(MlGuiParameterSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        MlGuiParameter model = new MlGuiParameterImpl();

        model.setMlGuiParameterId(soapModel.getMlGuiParameterId());
        model.setParentId(soapModel.getParentId());
        model.setKind(soapModel.getKind());
        model.setDisplayName(soapModel.getDisplayName());
        model.setValueType(soapModel.getValueType());
        model.setValue(soapModel.getValue());
        model.setImage(soapModel.getImage());
        model.setOption(soapModel.getOption());
        model.setDescription(soapModel.getDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<MlGuiParameter> toModels(MlGuiParameterSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<MlGuiParameter> models = new ArrayList<MlGuiParameter>(soapModels.length);

        for (MlGuiParameterSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _mlGuiParameterId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMlGuiParameterId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _mlGuiParameterId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return MlGuiParameter.class;
    }

    @Override
    public String getModelClassName() {
        return MlGuiParameter.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("mlGuiParameterId", getMlGuiParameterId());
        attributes.put("parentId", getParentId());
        attributes.put("kind", getKind());
        attributes.put("displayName", getDisplayName());
        attributes.put("valueType", getValueType());
        attributes.put("value", getValue());
        attributes.put("image", getImage());
        attributes.put("option", getOption());
        attributes.put("description", getDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long mlGuiParameterId = (Long) attributes.get("mlGuiParameterId");

        if (mlGuiParameterId != null) {
            setMlGuiParameterId(mlGuiParameterId);
        }

        Long parentId = (Long) attributes.get("parentId");

        if (parentId != null) {
            setParentId(parentId);
        }

        String kind = (String) attributes.get("kind");

        if (kind != null) {
            setKind(kind);
        }

        String displayName = (String) attributes.get("displayName");

        if (displayName != null) {
            setDisplayName(displayName);
        }

        String valueType = (String) attributes.get("valueType");

        if (valueType != null) {
            setValueType(valueType);
        }

        String value = (String) attributes.get("value");

        if (value != null) {
            setValue(value);
        }

        String image = (String) attributes.get("image");

        if (image != null) {
            setImage(image);
        }

        String option = (String) attributes.get("option");

        if (option != null) {
            setOption(option);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }
    }

    @JSON
    @Override
    public long getMlGuiParameterId() {
        return _mlGuiParameterId;
    }

    @Override
    public void setMlGuiParameterId(long mlGuiParameterId) {
        _mlGuiParameterId = mlGuiParameterId;
    }

    @JSON
    @Override
    public long getParentId() {
        return _parentId;
    }

    @Override
    public void setParentId(long parentId) {
        _columnBitmask |= PARENTID_COLUMN_BITMASK;

        if (!_setOriginalParentId) {
            _setOriginalParentId = true;

            _originalParentId = _parentId;
        }

        _parentId = parentId;
    }

    public long getOriginalParentId() {
        return _originalParentId;
    }

    @JSON
    @Override
    public String getKind() {
        if (_kind == null) {
            return StringPool.BLANK;
        } else {
            return _kind;
        }
    }

    @Override
    public void setKind(String kind) {
        _columnBitmask |= KIND_COLUMN_BITMASK;

        if (_originalKind == null) {
            _originalKind = _kind;
        }

        _kind = kind;
    }

    public String getOriginalKind() {
        return GetterUtil.getString(_originalKind);
    }

    @JSON
    @Override
    public String getDisplayName() {
        if (_displayName == null) {
            return StringPool.BLANK;
        } else {
            return _displayName;
        }
    }

    @Override
    public void setDisplayName(String displayName) {
        _displayName = displayName;
    }

    @JSON
    @Override
    public String getValueType() {
        if (_valueType == null) {
            return StringPool.BLANK;
        } else {
            return _valueType;
        }
    }

    @Override
    public void setValueType(String valueType) {
        _valueType = valueType;
    }

    @JSON
    @Override
    public String getValue() {
        if (_value == null) {
            return StringPool.BLANK;
        } else {
            return _value;
        }
    }

    @Override
    public void setValue(String value) {
        _value = value;
    }

    @JSON
    @Override
    public String getImage() {
        if (_image == null) {
            return StringPool.BLANK;
        } else {
            return _image;
        }
    }

    @Override
    public void setImage(String image) {
        _image = image;
    }

    @JSON
    @Override
    public String getOption() {
        if (_option == null) {
            return StringPool.BLANK;
        } else {
            return _option;
        }
    }

    @Override
    public void setOption(String option) {
        _option = option;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            MlGuiParameter.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public MlGuiParameter toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (MlGuiParameter) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MlGuiParameterImpl mlGuiParameterImpl = new MlGuiParameterImpl();

        mlGuiParameterImpl.setMlGuiParameterId(getMlGuiParameterId());
        mlGuiParameterImpl.setParentId(getParentId());
        mlGuiParameterImpl.setKind(getKind());
        mlGuiParameterImpl.setDisplayName(getDisplayName());
        mlGuiParameterImpl.setValueType(getValueType());
        mlGuiParameterImpl.setValue(getValue());
        mlGuiParameterImpl.setImage(getImage());
        mlGuiParameterImpl.setOption(getOption());
        mlGuiParameterImpl.setDescription(getDescription());

        mlGuiParameterImpl.resetOriginalValues();

        return mlGuiParameterImpl;
    }

    @Override
    public int compareTo(MlGuiParameter mlGuiParameter) {
        long primaryKey = mlGuiParameter.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof MlGuiParameter)) {
            return false;
        }

        MlGuiParameter mlGuiParameter = (MlGuiParameter) obj;

        long primaryKey = mlGuiParameter.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MlGuiParameterModelImpl mlGuiParameterModelImpl = this;

        mlGuiParameterModelImpl._originalParentId = mlGuiParameterModelImpl._parentId;

        mlGuiParameterModelImpl._setOriginalParentId = false;

        mlGuiParameterModelImpl._originalKind = mlGuiParameterModelImpl._kind;

        mlGuiParameterModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<MlGuiParameter> toCacheModel() {
        MlGuiParameterCacheModel mlGuiParameterCacheModel = new MlGuiParameterCacheModel();

        mlGuiParameterCacheModel.mlGuiParameterId = getMlGuiParameterId();

        mlGuiParameterCacheModel.parentId = getParentId();

        mlGuiParameterCacheModel.kind = getKind();

        String kind = mlGuiParameterCacheModel.kind;

        if ((kind != null) && (kind.length() == 0)) {
            mlGuiParameterCacheModel.kind = null;
        }

        mlGuiParameterCacheModel.displayName = getDisplayName();

        String displayName = mlGuiParameterCacheModel.displayName;

        if ((displayName != null) && (displayName.length() == 0)) {
            mlGuiParameterCacheModel.displayName = null;
        }

        mlGuiParameterCacheModel.valueType = getValueType();

        String valueType = mlGuiParameterCacheModel.valueType;

        if ((valueType != null) && (valueType.length() == 0)) {
            mlGuiParameterCacheModel.valueType = null;
        }

        mlGuiParameterCacheModel.value = getValue();

        String value = mlGuiParameterCacheModel.value;

        if ((value != null) && (value.length() == 0)) {
            mlGuiParameterCacheModel.value = null;
        }

        mlGuiParameterCacheModel.image = getImage();

        String image = mlGuiParameterCacheModel.image;

        if ((image != null) && (image.length() == 0)) {
            mlGuiParameterCacheModel.image = null;
        }

        mlGuiParameterCacheModel.option = getOption();

        String option = mlGuiParameterCacheModel.option;

        if ((option != null) && (option.length() == 0)) {
            mlGuiParameterCacheModel.option = null;
        }

        mlGuiParameterCacheModel.description = getDescription();

        String description = mlGuiParameterCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            mlGuiParameterCacheModel.description = null;
        }

        return mlGuiParameterCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{mlGuiParameterId=");
        sb.append(getMlGuiParameterId());
        sb.append(", parentId=");
        sb.append(getParentId());
        sb.append(", kind=");
        sb.append(getKind());
        sb.append(", displayName=");
        sb.append(getDisplayName());
        sb.append(", valueType=");
        sb.append(getValueType());
        sb.append(", value=");
        sb.append(getValue());
        sb.append(", image=");
        sb.append(getImage());
        sb.append(", option=");
        sb.append(getOption());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.MlGuiParameter");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>mlGuiParameterId</column-name><column-value><![CDATA[");
        sb.append(getMlGuiParameterId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentId</column-name><column-value><![CDATA[");
        sb.append(getParentId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kind</column-name><column-value><![CDATA[");
        sb.append(getKind());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>displayName</column-name><column-value><![CDATA[");
        sb.append(getDisplayName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>valueType</column-name><column-value><![CDATA[");
        sb.append(getValueType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>value</column-name><column-value><![CDATA[");
        sb.append(getValue());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>image</column-name><column-value><![CDATA[");
        sb.append(getImage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>option</column-name><column-value><![CDATA[");
        sb.append(getOption());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
