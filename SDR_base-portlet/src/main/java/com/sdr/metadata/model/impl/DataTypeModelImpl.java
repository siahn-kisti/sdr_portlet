package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.DataType;
import com.sdr.metadata.model.DataTypeModel;
import com.sdr.metadata.model.DataTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataType service. Represents a row in the &quot;sdr_DataType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.DataTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataTypeImpl}.
 * </p>
 *
 * @author jaesung
 * @see DataTypeImpl
 * @see com.sdr.metadata.model.DataType
 * @see com.sdr.metadata.model.DataTypeModel
 * @generated
 */
@JSON(strict = true)
public class DataTypeModelImpl extends BaseModelImpl<DataType>
    implements DataTypeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a data type model instance should use the {@link com.sdr.metadata.model.DataType} interface instead.
     */
    public static final String TABLE_NAME = "sdr_DataType";
    public static final Object[][] TABLE_COLUMNS = {
            { "dataTypeId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "fileValidationRule", Types.VARCHAR },
            { "userId", Types.BIGINT },
            { "allowedUserId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "curateRequired", Types.BOOLEAN },
            { "location", Types.VARCHAR },
            { "dockerImage", Types.VARCHAR },
            { "defaultPpLogicId", Types.BIGINT },
            { "status", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_DataType (dataTypeId LONG not null primary key,title VARCHAR(200) null,description VARCHAR(2000) null,fileValidationRule VARCHAR(75) null,userId LONG,allowedUserId LONG,groupId LONG,companyId LONG,curateRequired BOOLEAN,location VARCHAR(200) null,dockerImage VARCHAR(75) null,defaultPpLogicId LONG,status INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table sdr_DataType";
    public static final String ORDER_BY_JPQL = " ORDER BY dataType.dataTypeId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_DataType.dataTypeId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.DataType"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.DataType"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.DataType"),
            true);
    public static long TITLE_COLUMN_BITMASK = 1L;
    public static long DATATYPEID_COLUMN_BITMASK = 2L;
    public static final String MAPPING_TABLE_SDR_DATATYPE_DATATYPESCHEMA_NAME = "sdr_DataType_dataTypeSchema";
    public static final Object[][] MAPPING_TABLE_SDR_DATATYPE_DATATYPESCHEMA_COLUMNS =
        {
            { "dataTypeId", Types.BIGINT },
            { "dataTypeSchemaId", Types.BIGINT }
        };
    public static final String MAPPING_TABLE_SDR_DATATYPE_DATATYPESCHEMA_SQL_CREATE =
        "create table sdr_DataType_dataTypeSchema (dataTypeId LONG not null,dataTypeSchemaId LONG not null,primary key (dataTypeId, dataTypeSchemaId))";
    public static final boolean FINDER_CACHE_ENABLED_SDR_DATATYPE_DATATYPESCHEMA =
        GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.sdr_DataType_dataTypeSchema"),
            true);
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.DataType"));
    private static ClassLoader _classLoader = DataType.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DataType.class
        };
    private long _dataTypeId;
    private String _title;
    private String _originalTitle;
    private String _description;
    private String _fileValidationRule;
    private long _userId;
    private String _userUuid;
    private long _allowedUserId;
    private String _allowedUserUuid;
    private long _groupId;
    private long _companyId;
    private boolean _curateRequired;
    private String _location;
    private String _dockerImage;
    private long _defaultPpLogicId;
    private int _status;
    private long _columnBitmask;
    private DataType _escapedModel;

    public DataTypeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DataType toModel(DataTypeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        DataType model = new DataTypeImpl();

        model.setDataTypeId(soapModel.getDataTypeId());
        model.setTitle(soapModel.getTitle());
        model.setDescription(soapModel.getDescription());
        model.setFileValidationRule(soapModel.getFileValidationRule());
        model.setUserId(soapModel.getUserId());
        model.setAllowedUserId(soapModel.getAllowedUserId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setCurateRequired(soapModel.getCurateRequired());
        model.setLocation(soapModel.getLocation());
        model.setDockerImage(soapModel.getDockerImage());
        model.setDefaultPpLogicId(soapModel.getDefaultPpLogicId());
        model.setStatus(soapModel.getStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DataType> toModels(DataTypeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<DataType> models = new ArrayList<DataType>(soapModels.length);

        for (DataTypeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _dataTypeId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDataTypeId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _dataTypeId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return DataType.class;
    }

    @Override
    public String getModelClassName() {
        return DataType.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dataTypeId", getDataTypeId());
        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("fileValidationRule", getFileValidationRule());
        attributes.put("userId", getUserId());
        attributes.put("allowedUserId", getAllowedUserId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("curateRequired", getCurateRequired());
        attributes.put("location", getLocation());
        attributes.put("dockerImage", getDockerImage());
        attributes.put("defaultPpLogicId", getDefaultPpLogicId());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long dataTypeId = (Long) attributes.get("dataTypeId");

        if (dataTypeId != null) {
            setDataTypeId(dataTypeId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String fileValidationRule = (String) attributes.get(
                "fileValidationRule");

        if (fileValidationRule != null) {
            setFileValidationRule(fileValidationRule);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Long allowedUserId = (Long) attributes.get("allowedUserId");

        if (allowedUserId != null) {
            setAllowedUserId(allowedUserId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Boolean curateRequired = (Boolean) attributes.get("curateRequired");

        if (curateRequired != null) {
            setCurateRequired(curateRequired);
        }

        String location = (String) attributes.get("location");

        if (location != null) {
            setLocation(location);
        }

        String dockerImage = (String) attributes.get("dockerImage");

        if (dockerImage != null) {
            setDockerImage(dockerImage);
        }

        Long defaultPpLogicId = (Long) attributes.get("defaultPpLogicId");

        if (defaultPpLogicId != null) {
            setDefaultPpLogicId(defaultPpLogicId);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @JSON
    @Override
    public long getDataTypeId() {
        return _dataTypeId;
    }

    @Override
    public void setDataTypeId(long dataTypeId) {
        _dataTypeId = dataTypeId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _columnBitmask |= TITLE_COLUMN_BITMASK;

        if (_originalTitle == null) {
            _originalTitle = _title;
        }

        _title = title;
    }

    public String getOriginalTitle() {
        return GetterUtil.getString(_originalTitle);
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getFileValidationRule() {
        if (_fileValidationRule == null) {
            return StringPool.BLANK;
        } else {
            return _fileValidationRule;
        }
    }

    @Override
    public void setFileValidationRule(String fileValidationRule) {
        _fileValidationRule = fileValidationRule;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public long getAllowedUserId() {
        return _allowedUserId;
    }

    @Override
    public void setAllowedUserId(long allowedUserId) {
        _allowedUserId = allowedUserId;
    }

    @Override
    public String getAllowedUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getAllowedUserId(), "uuid",
            _allowedUserUuid);
    }

    @Override
    public void setAllowedUserUuid(String allowedUserUuid) {
        _allowedUserUuid = allowedUserUuid;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public boolean getCurateRequired() {
        return _curateRequired;
    }

    @Override
    public boolean isCurateRequired() {
        return _curateRequired;
    }

    @Override
    public void setCurateRequired(boolean curateRequired) {
        _curateRequired = curateRequired;
    }

    @JSON
    @Override
    public String getLocation() {
        if (_location == null) {
            return StringPool.BLANK;
        } else {
            return _location;
        }
    }

    @Override
    public void setLocation(String location) {
        _location = location;
    }

    @JSON
    @Override
    public String getDockerImage() {
        if (_dockerImage == null) {
            return StringPool.BLANK;
        } else {
            return _dockerImage;
        }
    }

    @Override
    public void setDockerImage(String dockerImage) {
        _dockerImage = dockerImage;
    }

    @JSON
    @Override
    public long getDefaultPpLogicId() {
        return _defaultPpLogicId;
    }

    @Override
    public void setDefaultPpLogicId(long defaultPpLogicId) {
        _defaultPpLogicId = defaultPpLogicId;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            DataType.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public DataType toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DataType) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DataTypeImpl dataTypeImpl = new DataTypeImpl();

        dataTypeImpl.setDataTypeId(getDataTypeId());
        dataTypeImpl.setTitle(getTitle());
        dataTypeImpl.setDescription(getDescription());
        dataTypeImpl.setFileValidationRule(getFileValidationRule());
        dataTypeImpl.setUserId(getUserId());
        dataTypeImpl.setAllowedUserId(getAllowedUserId());
        dataTypeImpl.setGroupId(getGroupId());
        dataTypeImpl.setCompanyId(getCompanyId());
        dataTypeImpl.setCurateRequired(getCurateRequired());
        dataTypeImpl.setLocation(getLocation());
        dataTypeImpl.setDockerImage(getDockerImage());
        dataTypeImpl.setDefaultPpLogicId(getDefaultPpLogicId());
        dataTypeImpl.setStatus(getStatus());

        dataTypeImpl.resetOriginalValues();

        return dataTypeImpl;
    }

    @Override
    public int compareTo(DataType dataType) {
        long primaryKey = dataType.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DataType)) {
            return false;
        }

        DataType dataType = (DataType) obj;

        long primaryKey = dataType.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DataTypeModelImpl dataTypeModelImpl = this;

        dataTypeModelImpl._originalTitle = dataTypeModelImpl._title;

        dataTypeModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<DataType> toCacheModel() {
        DataTypeCacheModel dataTypeCacheModel = new DataTypeCacheModel();

        dataTypeCacheModel.dataTypeId = getDataTypeId();

        dataTypeCacheModel.title = getTitle();

        String title = dataTypeCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            dataTypeCacheModel.title = null;
        }

        dataTypeCacheModel.description = getDescription();

        String description = dataTypeCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            dataTypeCacheModel.description = null;
        }

        dataTypeCacheModel.fileValidationRule = getFileValidationRule();

        String fileValidationRule = dataTypeCacheModel.fileValidationRule;

        if ((fileValidationRule != null) && (fileValidationRule.length() == 0)) {
            dataTypeCacheModel.fileValidationRule = null;
        }

        dataTypeCacheModel.userId = getUserId();

        dataTypeCacheModel.allowedUserId = getAllowedUserId();

        dataTypeCacheModel.groupId = getGroupId();

        dataTypeCacheModel.companyId = getCompanyId();

        dataTypeCacheModel.curateRequired = getCurateRequired();

        dataTypeCacheModel.location = getLocation();

        String location = dataTypeCacheModel.location;

        if ((location != null) && (location.length() == 0)) {
            dataTypeCacheModel.location = null;
        }

        dataTypeCacheModel.dockerImage = getDockerImage();

        String dockerImage = dataTypeCacheModel.dockerImage;

        if ((dockerImage != null) && (dockerImage.length() == 0)) {
            dataTypeCacheModel.dockerImage = null;
        }

        dataTypeCacheModel.defaultPpLogicId = getDefaultPpLogicId();

        dataTypeCacheModel.status = getStatus();

        return dataTypeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{dataTypeId=");
        sb.append(getDataTypeId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", fileValidationRule=");
        sb.append(getFileValidationRule());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", allowedUserId=");
        sb.append(getAllowedUserId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", curateRequired=");
        sb.append(getCurateRequired());
        sb.append(", location=");
        sb.append(getLocation());
        sb.append(", dockerImage=");
        sb.append(getDockerImage());
        sb.append(", defaultPpLogicId=");
        sb.append(getDefaultPpLogicId());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.DataType");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dataTypeId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileValidationRule</column-name><column-value><![CDATA[");
        sb.append(getFileValidationRule());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>allowedUserId</column-name><column-value><![CDATA[");
        sb.append(getAllowedUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>curateRequired</column-name><column-value><![CDATA[");
        sb.append(getCurateRequired());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>location</column-name><column-value><![CDATA[");
        sb.append(getLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dockerImage</column-name><column-value><![CDATA[");
        sb.append(getDockerImage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>defaultPpLogicId</column-name><column-value><![CDATA[");
        sb.append(getDefaultPpLogicId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
