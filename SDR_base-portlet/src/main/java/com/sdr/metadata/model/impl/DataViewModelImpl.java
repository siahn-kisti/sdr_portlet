package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.DataView;
import com.sdr.metadata.model.DataViewModel;
import com.sdr.metadata.model.DataViewSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataView service. Represents a row in the &quot;sdr_DataView&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.DataViewModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataViewImpl}.
 * </p>
 *
 * @author jaesung
 * @see DataViewImpl
 * @see com.sdr.metadata.model.DataView
 * @see com.sdr.metadata.model.DataViewModel
 * @generated
 */
@JSON(strict = true)
public class DataViewModelImpl extends BaseModelImpl<DataView>
    implements DataViewModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a data view model instance should use the {@link com.sdr.metadata.model.DataView} interface instead.
     */
    public static final String TABLE_NAME = "sdr_DataView";
    public static final Object[][] TABLE_COLUMNS = {
            { "dataViewId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "dataTypeId", Types.BIGINT },
            { "html", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "status", Types.INTEGER },
            { "orderNo", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_DataView (dataViewId LONG not null primary key,title VARCHAR(200) null,dataTypeId LONG,html TEXT null,description VARCHAR(2000) null,groupId LONG,companyId LONG,userId LONG,status INTEGER,orderNo INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table sdr_DataView";
    public static final String ORDER_BY_JPQL = " ORDER BY dataView.dataViewId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_DataView.dataViewId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.DataView"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.DataView"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.DataView"),
            true);
    public static long DATATYPEID_COLUMN_BITMASK = 1L;
    public static long STATUS_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static long DATAVIEWID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.DataView"));
    private static ClassLoader _classLoader = DataView.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DataView.class
        };
    private long _dataViewId;
    private String _title;
    private long _dataTypeId;
    private long _originalDataTypeId;
    private boolean _setOriginalDataTypeId;
    private String _html;
    private String _description;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private int _status;
    private int _originalStatus;
    private boolean _setOriginalStatus;
    private int _orderNo;
    private long _columnBitmask;
    private DataView _escapedModel;

    public DataViewModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DataView toModel(DataViewSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        DataView model = new DataViewImpl();

        model.setDataViewId(soapModel.getDataViewId());
        model.setTitle(soapModel.getTitle());
        model.setDataTypeId(soapModel.getDataTypeId());
        model.setHtml(soapModel.getHtml());
        model.setDescription(soapModel.getDescription());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setStatus(soapModel.getStatus());
        model.setOrderNo(soapModel.getOrderNo());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DataView> toModels(DataViewSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<DataView> models = new ArrayList<DataView>(soapModels.length);

        for (DataViewSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _dataViewId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDataViewId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _dataViewId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return DataView.class;
    }

    @Override
    public String getModelClassName() {
        return DataView.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dataViewId", getDataViewId());
        attributes.put("title", getTitle());
        attributes.put("dataTypeId", getDataTypeId());
        attributes.put("html", getHtml());
        attributes.put("description", getDescription());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("status", getStatus());
        attributes.put("orderNo", getOrderNo());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long dataViewId = (Long) attributes.get("dataViewId");

        if (dataViewId != null) {
            setDataViewId(dataViewId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        Long dataTypeId = (Long) attributes.get("dataTypeId");

        if (dataTypeId != null) {
            setDataTypeId(dataTypeId);
        }

        String html = (String) attributes.get("html");

        if (html != null) {
            setHtml(html);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Integer orderNo = (Integer) attributes.get("orderNo");

        if (orderNo != null) {
            setOrderNo(orderNo);
        }
    }

    @JSON
    @Override
    public long getDataViewId() {
        return _dataViewId;
    }

    @Override
    public void setDataViewId(long dataViewId) {
        _dataViewId = dataViewId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public long getDataTypeId() {
        return _dataTypeId;
    }

    @Override
    public void setDataTypeId(long dataTypeId) {
        _columnBitmask |= DATATYPEID_COLUMN_BITMASK;

        if (!_setOriginalDataTypeId) {
            _setOriginalDataTypeId = true;

            _originalDataTypeId = _dataTypeId;
        }

        _dataTypeId = dataTypeId;
    }

    public long getOriginalDataTypeId() {
        return _originalDataTypeId;
    }

    @JSON
    @Override
    public String getHtml() {
        if (_html == null) {
            return StringPool.BLANK;
        } else {
            return _html;
        }
    }

    @Override
    public void setHtml(String html) {
        _html = html;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public int getOriginalStatus() {
        return _originalStatus;
    }

    @JSON
    @Override
    public int getOrderNo() {
        return _orderNo;
    }

    @Override
    public void setOrderNo(int orderNo) {
        _orderNo = orderNo;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            DataView.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public DataView toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DataView) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DataViewImpl dataViewImpl = new DataViewImpl();

        dataViewImpl.setDataViewId(getDataViewId());
        dataViewImpl.setTitle(getTitle());
        dataViewImpl.setDataTypeId(getDataTypeId());
        dataViewImpl.setHtml(getHtml());
        dataViewImpl.setDescription(getDescription());
        dataViewImpl.setGroupId(getGroupId());
        dataViewImpl.setCompanyId(getCompanyId());
        dataViewImpl.setUserId(getUserId());
        dataViewImpl.setStatus(getStatus());
        dataViewImpl.setOrderNo(getOrderNo());

        dataViewImpl.resetOriginalValues();

        return dataViewImpl;
    }

    @Override
    public int compareTo(DataView dataView) {
        long primaryKey = dataView.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DataView)) {
            return false;
        }

        DataView dataView = (DataView) obj;

        long primaryKey = dataView.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DataViewModelImpl dataViewModelImpl = this;

        dataViewModelImpl._originalDataTypeId = dataViewModelImpl._dataTypeId;

        dataViewModelImpl._setOriginalDataTypeId = false;

        dataViewModelImpl._originalUserId = dataViewModelImpl._userId;

        dataViewModelImpl._setOriginalUserId = false;

        dataViewModelImpl._originalStatus = dataViewModelImpl._status;

        dataViewModelImpl._setOriginalStatus = false;

        dataViewModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<DataView> toCacheModel() {
        DataViewCacheModel dataViewCacheModel = new DataViewCacheModel();

        dataViewCacheModel.dataViewId = getDataViewId();

        dataViewCacheModel.title = getTitle();

        String title = dataViewCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            dataViewCacheModel.title = null;
        }

        dataViewCacheModel.dataTypeId = getDataTypeId();

        dataViewCacheModel.html = getHtml();

        String html = dataViewCacheModel.html;

        if ((html != null) && (html.length() == 0)) {
            dataViewCacheModel.html = null;
        }

        dataViewCacheModel.description = getDescription();

        String description = dataViewCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            dataViewCacheModel.description = null;
        }

        dataViewCacheModel.groupId = getGroupId();

        dataViewCacheModel.companyId = getCompanyId();

        dataViewCacheModel.userId = getUserId();

        dataViewCacheModel.status = getStatus();

        dataViewCacheModel.orderNo = getOrderNo();

        return dataViewCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{dataViewId=");
        sb.append(getDataViewId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", dataTypeId=");
        sb.append(getDataTypeId());
        sb.append(", html=");
        sb.append(getHtml());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", orderNo=");
        sb.append(getOrderNo());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.DataView");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dataViewId</column-name><column-value><![CDATA[");
        sb.append(getDataViewId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataTypeId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>html</column-name><column-value><![CDATA[");
        sb.append(getHtml());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderNo</column-name><column-value><![CDATA[");
        sb.append(getOrderNo());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
