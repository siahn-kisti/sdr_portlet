package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.sdr.metadata.model.Collection_User;
import com.sdr.metadata.model.Collection_UserModel;
import com.sdr.metadata.model.Collection_UserSoap;
import com.sdr.metadata.service.persistence.Collection_UserPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Collection_User service. Represents a row in the &quot;sdr_Collection_User&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.Collection_UserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Collection_UserImpl}.
 * </p>
 *
 * @author jaesung
 * @see Collection_UserImpl
 * @see com.sdr.metadata.model.Collection_User
 * @see com.sdr.metadata.model.Collection_UserModel
 * @generated
 */
@JSON(strict = true)
public class Collection_UserModelImpl extends BaseModelImpl<Collection_User>
    implements Collection_UserModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a collection_ user model instance should use the {@link com.sdr.metadata.model.Collection_User} interface instead.
     */
    public static final String TABLE_NAME = "sdr_Collection_User";
    public static final Object[][] TABLE_COLUMNS = {
            { "collectionId", Types.BIGINT },
            { "userId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_Collection_User (collectionId LONG not null,userId LONG not null,primary key (collectionId, userId))";
    public static final String TABLE_SQL_DROP = "drop table sdr_Collection_User";
    public static final String ORDER_BY_JPQL = " ORDER BY collection_User.id.collectionId ASC, collection_User.id.userId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_Collection_User.collectionId ASC, sdr_Collection_User.userId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.Collection_User"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.Collection_User"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.Collection_User"),
            true);
    public static long COLLECTIONID_COLUMN_BITMASK = 1L;
    public static long USERID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.Collection_User"));
    private static ClassLoader _classLoader = Collection_User.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Collection_User.class
        };
    private long _collectionId;
    private long _originalCollectionId;
    private boolean _setOriginalCollectionId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _columnBitmask;
    private Collection_User _escapedModel;

    public Collection_UserModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Collection_User toModel(Collection_UserSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Collection_User model = new Collection_UserImpl();

        model.setCollectionId(soapModel.getCollectionId());
        model.setUserId(soapModel.getUserId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Collection_User> toModels(
        Collection_UserSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Collection_User> models = new ArrayList<Collection_User>(soapModels.length);

        for (Collection_UserSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public Collection_UserPK getPrimaryKey() {
        return new Collection_UserPK(_collectionId, _userId);
    }

    @Override
    public void setPrimaryKey(Collection_UserPK primaryKey) {
        setCollectionId(primaryKey.collectionId);
        setUserId(primaryKey.userId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new Collection_UserPK(_collectionId, _userId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((Collection_UserPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return Collection_User.class;
    }

    @Override
    public String getModelClassName() {
        return Collection_User.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("collectionId", getCollectionId());
        attributes.put("userId", getUserId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long collectionId = (Long) attributes.get("collectionId");

        if (collectionId != null) {
            setCollectionId(collectionId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }
    }

    @JSON
    @Override
    public long getCollectionId() {
        return _collectionId;
    }

    @Override
    public void setCollectionId(long collectionId) {
        _columnBitmask |= COLLECTIONID_COLUMN_BITMASK;

        if (!_setOriginalCollectionId) {
            _setOriginalCollectionId = true;

            _originalCollectionId = _collectionId;
        }

        _collectionId = collectionId;
    }

    public long getOriginalCollectionId() {
        return _originalCollectionId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Collection_User toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Collection_User) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        Collection_UserImpl collection_UserImpl = new Collection_UserImpl();

        collection_UserImpl.setCollectionId(getCollectionId());
        collection_UserImpl.setUserId(getUserId());

        collection_UserImpl.resetOriginalValues();

        return collection_UserImpl;
    }

    @Override
    public int compareTo(Collection_User collection_User) {
        Collection_UserPK primaryKey = collection_User.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Collection_User)) {
            return false;
        }

        Collection_User collection_User = (Collection_User) obj;

        Collection_UserPK primaryKey = collection_User.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        Collection_UserModelImpl collection_UserModelImpl = this;

        collection_UserModelImpl._originalCollectionId = collection_UserModelImpl._collectionId;

        collection_UserModelImpl._setOriginalCollectionId = false;

        collection_UserModelImpl._originalUserId = collection_UserModelImpl._userId;

        collection_UserModelImpl._setOriginalUserId = false;

        collection_UserModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Collection_User> toCacheModel() {
        Collection_UserCacheModel collection_UserCacheModel = new Collection_UserCacheModel();

        collection_UserCacheModel.collectionId = getCollectionId();

        collection_UserCacheModel.userId = getUserId();

        return collection_UserCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{collectionId=");
        sb.append(getCollectionId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.Collection_User");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>collectionId</column-name><column-value><![CDATA[");
        sb.append(getCollectionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
