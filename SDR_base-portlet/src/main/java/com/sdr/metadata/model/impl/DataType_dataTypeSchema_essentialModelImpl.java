package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.sdr.metadata.model.DataType_dataTypeSchema_essential;
import com.sdr.metadata.model.DataType_dataTypeSchema_essentialModel;
import com.sdr.metadata.model.DataType_dataTypeSchema_essentialSoap;
import com.sdr.metadata.service.persistence.DataType_dataTypeSchema_essentialPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataType_dataTypeSchema_essential service. Represents a row in the &quot;sdr_DataType_dataTypeSchema_essential&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.DataType_dataTypeSchema_essentialModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataType_dataTypeSchema_essentialImpl}.
 * </p>
 *
 * @author jaesung
 * @see DataType_dataTypeSchema_essentialImpl
 * @see com.sdr.metadata.model.DataType_dataTypeSchema_essential
 * @see com.sdr.metadata.model.DataType_dataTypeSchema_essentialModel
 * @generated
 */
@JSON(strict = true)
public class DataType_dataTypeSchema_essentialModelImpl extends BaseModelImpl<DataType_dataTypeSchema_essential>
    implements DataType_dataTypeSchema_essentialModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a data type_data type schema_essential model instance should use the {@link com.sdr.metadata.model.DataType_dataTypeSchema_essential} interface instead.
     */
    public static final String TABLE_NAME = "sdr_DataType_dataTypeSchema_essential";
    public static final Object[][] TABLE_COLUMNS = {
            { "dataTypeId", Types.BIGINT },
            { "dataTypeSchemaId", Types.BIGINT },
            { "essential", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_DataType_dataTypeSchema_essential (dataTypeId LONG not null,dataTypeSchemaId LONG not null,essential BOOLEAN,primary key (dataTypeId, dataTypeSchemaId))";
    public static final String TABLE_SQL_DROP = "drop table sdr_DataType_dataTypeSchema_essential";
    public static final String ORDER_BY_JPQL = " ORDER BY dataType_dataTypeSchema_essential.id.dataTypeId ASC, dataType_dataTypeSchema_essential.id.dataTypeSchemaId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_DataType_dataTypeSchema_essential.dataTypeId ASC, sdr_DataType_dataTypeSchema_essential.dataTypeSchemaId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.DataType_dataTypeSchema_essential"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.DataType_dataTypeSchema_essential"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.DataType_dataTypeSchema_essential"),
            true);
    public static long DATATYPEID_COLUMN_BITMASK = 1L;
    public static long DATATYPESCHEMAID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.DataType_dataTypeSchema_essential"));
    private static ClassLoader _classLoader = DataType_dataTypeSchema_essential.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DataType_dataTypeSchema_essential.class
        };
    private long _dataTypeId;
    private long _originalDataTypeId;
    private boolean _setOriginalDataTypeId;
    private long _dataTypeSchemaId;
    private long _originalDataTypeSchemaId;
    private boolean _setOriginalDataTypeSchemaId;
    private boolean _essential;
    private long _columnBitmask;
    private DataType_dataTypeSchema_essential _escapedModel;

    public DataType_dataTypeSchema_essentialModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DataType_dataTypeSchema_essential toModel(
        DataType_dataTypeSchema_essentialSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        DataType_dataTypeSchema_essential model = new DataType_dataTypeSchema_essentialImpl();

        model.setDataTypeId(soapModel.getDataTypeId());
        model.setDataTypeSchemaId(soapModel.getDataTypeSchemaId());
        model.setEssential(soapModel.getEssential());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DataType_dataTypeSchema_essential> toModels(
        DataType_dataTypeSchema_essentialSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<DataType_dataTypeSchema_essential> models = new ArrayList<DataType_dataTypeSchema_essential>(soapModels.length);

        for (DataType_dataTypeSchema_essentialSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public DataType_dataTypeSchema_essentialPK getPrimaryKey() {
        return new DataType_dataTypeSchema_essentialPK(_dataTypeId,
            _dataTypeSchemaId);
    }

    @Override
    public void setPrimaryKey(DataType_dataTypeSchema_essentialPK primaryKey) {
        setDataTypeId(primaryKey.dataTypeId);
        setDataTypeSchemaId(primaryKey.dataTypeSchemaId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new DataType_dataTypeSchema_essentialPK(_dataTypeId,
            _dataTypeSchemaId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((DataType_dataTypeSchema_essentialPK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return DataType_dataTypeSchema_essential.class;
    }

    @Override
    public String getModelClassName() {
        return DataType_dataTypeSchema_essential.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dataTypeId", getDataTypeId());
        attributes.put("dataTypeSchemaId", getDataTypeSchemaId());
        attributes.put("essential", getEssential());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long dataTypeId = (Long) attributes.get("dataTypeId");

        if (dataTypeId != null) {
            setDataTypeId(dataTypeId);
        }

        Long dataTypeSchemaId = (Long) attributes.get("dataTypeSchemaId");

        if (dataTypeSchemaId != null) {
            setDataTypeSchemaId(dataTypeSchemaId);
        }

        Boolean essential = (Boolean) attributes.get("essential");

        if (essential != null) {
            setEssential(essential);
        }
    }

    @JSON
    @Override
    public long getDataTypeId() {
        return _dataTypeId;
    }

    @Override
    public void setDataTypeId(long dataTypeId) {
        _columnBitmask |= DATATYPEID_COLUMN_BITMASK;

        if (!_setOriginalDataTypeId) {
            _setOriginalDataTypeId = true;

            _originalDataTypeId = _dataTypeId;
        }

        _dataTypeId = dataTypeId;
    }

    public long getOriginalDataTypeId() {
        return _originalDataTypeId;
    }

    @JSON
    @Override
    public long getDataTypeSchemaId() {
        return _dataTypeSchemaId;
    }

    @Override
    public void setDataTypeSchemaId(long dataTypeSchemaId) {
        _columnBitmask |= DATATYPESCHEMAID_COLUMN_BITMASK;

        if (!_setOriginalDataTypeSchemaId) {
            _setOriginalDataTypeSchemaId = true;

            _originalDataTypeSchemaId = _dataTypeSchemaId;
        }

        _dataTypeSchemaId = dataTypeSchemaId;
    }

    public long getOriginalDataTypeSchemaId() {
        return _originalDataTypeSchemaId;
    }

    @JSON
    @Override
    public boolean getEssential() {
        return _essential;
    }

    @Override
    public boolean isEssential() {
        return _essential;
    }

    @Override
    public void setEssential(boolean essential) {
        _essential = essential;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public DataType_dataTypeSchema_essential toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DataType_dataTypeSchema_essential) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DataType_dataTypeSchema_essentialImpl dataType_dataTypeSchema_essentialImpl =
            new DataType_dataTypeSchema_essentialImpl();

        dataType_dataTypeSchema_essentialImpl.setDataTypeId(getDataTypeId());
        dataType_dataTypeSchema_essentialImpl.setDataTypeSchemaId(getDataTypeSchemaId());
        dataType_dataTypeSchema_essentialImpl.setEssential(getEssential());

        dataType_dataTypeSchema_essentialImpl.resetOriginalValues();

        return dataType_dataTypeSchema_essentialImpl;
    }

    @Override
    public int compareTo(
        DataType_dataTypeSchema_essential dataType_dataTypeSchema_essential) {
        DataType_dataTypeSchema_essentialPK primaryKey = dataType_dataTypeSchema_essential.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DataType_dataTypeSchema_essential)) {
            return false;
        }

        DataType_dataTypeSchema_essential dataType_dataTypeSchema_essential = (DataType_dataTypeSchema_essential) obj;

        DataType_dataTypeSchema_essentialPK primaryKey = dataType_dataTypeSchema_essential.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        DataType_dataTypeSchema_essentialModelImpl dataType_dataTypeSchema_essentialModelImpl =
            this;

        dataType_dataTypeSchema_essentialModelImpl._originalDataTypeId = dataType_dataTypeSchema_essentialModelImpl._dataTypeId;

        dataType_dataTypeSchema_essentialModelImpl._setOriginalDataTypeId = false;

        dataType_dataTypeSchema_essentialModelImpl._originalDataTypeSchemaId = dataType_dataTypeSchema_essentialModelImpl._dataTypeSchemaId;

        dataType_dataTypeSchema_essentialModelImpl._setOriginalDataTypeSchemaId = false;

        dataType_dataTypeSchema_essentialModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<DataType_dataTypeSchema_essential> toCacheModel() {
        DataType_dataTypeSchema_essentialCacheModel dataType_dataTypeSchema_essentialCacheModel =
            new DataType_dataTypeSchema_essentialCacheModel();

        dataType_dataTypeSchema_essentialCacheModel.dataTypeId = getDataTypeId();

        dataType_dataTypeSchema_essentialCacheModel.dataTypeSchemaId = getDataTypeSchemaId();

        dataType_dataTypeSchema_essentialCacheModel.essential = getEssential();

        return dataType_dataTypeSchema_essentialCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{dataTypeId=");
        sb.append(getDataTypeId());
        sb.append(", dataTypeSchemaId=");
        sb.append(getDataTypeSchemaId());
        sb.append(", essential=");
        sb.append(getEssential());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.DataType_dataTypeSchema_essential");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dataTypeId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataTypeSchemaId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeSchemaId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>essential</column-name><column-value><![CDATA[");
        sb.append(getEssential());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
