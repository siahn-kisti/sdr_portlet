package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.Collection;
import com.sdr.metadata.model.CollectionModel;
import com.sdr.metadata.model.CollectionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Collection service. Represents a row in the &quot;sdr_Collection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.CollectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CollectionImpl}.
 * </p>
 *
 * @author jaesung
 * @see CollectionImpl
 * @see com.sdr.metadata.model.Collection
 * @see com.sdr.metadata.model.CollectionModel
 * @generated
 */
@JSON(strict = true)
public class CollectionModelImpl extends BaseModelImpl<Collection>
    implements CollectionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a collection model instance should use the {@link com.sdr.metadata.model.Collection} interface instead.
     */
    public static final String TABLE_NAME = "sdr_Collection";
    public static final Object[][] TABLE_COLUMNS = {
            { "collectionId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "description", Types.VARCHAR },
            { "usageRight", Types.VARCHAR },
            { "doi", Types.VARCHAR },
            { "accessPolicy", Types.INTEGER },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "skipCurate", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_Collection (collectionId LONG not null primary key,title VARCHAR(200) null,userId LONG,createDate DATE null,description VARCHAR(2000) null,usageRight VARCHAR(75) null,doi VARCHAR(100) null,accessPolicy INTEGER,groupId LONG,companyId LONG,skipCurate BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table sdr_Collection";
    public static final String ORDER_BY_JPQL = " ORDER BY collection.collectionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_Collection.collectionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.Collection"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.Collection"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.Collection"),
            true);
    public static long COLLECTIONID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long TITLE_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.Collection"));
    private static ClassLoader _classLoader = Collection.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Collection.class
        };
    private long _collectionId;
    private long _originalCollectionId;
    private boolean _setOriginalCollectionId;
    private String _title;
    private String _originalTitle;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private String _description;
    private String _usageRight;
    private String _doi;
    private int _accessPolicy;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private boolean _skipCurate;
    private long _columnBitmask;
    private Collection _escapedModel;

    public CollectionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Collection toModel(CollectionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Collection model = new CollectionImpl();

        model.setCollectionId(soapModel.getCollectionId());
        model.setTitle(soapModel.getTitle());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setDescription(soapModel.getDescription());
        model.setUsageRight(soapModel.getUsageRight());
        model.setDoi(soapModel.getDoi());
        model.setAccessPolicy(soapModel.getAccessPolicy());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setSkipCurate(soapModel.getSkipCurate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Collection> toModels(CollectionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Collection> models = new ArrayList<Collection>(soapModels.length);

        for (CollectionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _collectionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCollectionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _collectionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Collection.class;
    }

    @Override
    public String getModelClassName() {
        return Collection.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("collectionId", getCollectionId());
        attributes.put("title", getTitle());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("description", getDescription());
        attributes.put("usageRight", getUsageRight());
        attributes.put("doi", getDoi());
        attributes.put("accessPolicy", getAccessPolicy());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("skipCurate", getSkipCurate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long collectionId = (Long) attributes.get("collectionId");

        if (collectionId != null) {
            setCollectionId(collectionId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String usageRight = (String) attributes.get("usageRight");

        if (usageRight != null) {
            setUsageRight(usageRight);
        }

        String doi = (String) attributes.get("doi");

        if (doi != null) {
            setDoi(doi);
        }

        Integer accessPolicy = (Integer) attributes.get("accessPolicy");

        if (accessPolicy != null) {
            setAccessPolicy(accessPolicy);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Boolean skipCurate = (Boolean) attributes.get("skipCurate");

        if (skipCurate != null) {
            setSkipCurate(skipCurate);
        }
    }

    @JSON
    @Override
    public long getCollectionId() {
        return _collectionId;
    }

    @Override
    public void setCollectionId(long collectionId) {
        _columnBitmask |= COLLECTIONID_COLUMN_BITMASK;

        if (!_setOriginalCollectionId) {
            _setOriginalCollectionId = true;

            _originalCollectionId = _collectionId;
        }

        _collectionId = collectionId;
    }

    public long getOriginalCollectionId() {
        return _originalCollectionId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _columnBitmask |= TITLE_COLUMN_BITMASK;

        if (_originalTitle == null) {
            _originalTitle = _title;
        }

        _title = title;
    }

    public String getOriginalTitle() {
        return GetterUtil.getString(_originalTitle);
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getUsageRight() {
        if (_usageRight == null) {
            return StringPool.BLANK;
        } else {
            return _usageRight;
        }
    }

    @Override
    public void setUsageRight(String usageRight) {
        _usageRight = usageRight;
    }

    @JSON
    @Override
    public String getDoi() {
        if (_doi == null) {
            return StringPool.BLANK;
        } else {
            return _doi;
        }
    }

    @Override
    public void setDoi(String doi) {
        _doi = doi;
    }

    @JSON
    @Override
    public int getAccessPolicy() {
        return _accessPolicy;
    }

    @Override
    public void setAccessPolicy(int accessPolicy) {
        _accessPolicy = accessPolicy;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public boolean getSkipCurate() {
        return _skipCurate;
    }

    @Override
    public boolean isSkipCurate() {
        return _skipCurate;
    }

    @Override
    public void setSkipCurate(boolean skipCurate) {
        _skipCurate = skipCurate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Collection.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Collection toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Collection) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CollectionImpl collectionImpl = new CollectionImpl();

        collectionImpl.setCollectionId(getCollectionId());
        collectionImpl.setTitle(getTitle());
        collectionImpl.setUserId(getUserId());
        collectionImpl.setCreateDate(getCreateDate());
        collectionImpl.setDescription(getDescription());
        collectionImpl.setUsageRight(getUsageRight());
        collectionImpl.setDoi(getDoi());
        collectionImpl.setAccessPolicy(getAccessPolicy());
        collectionImpl.setGroupId(getGroupId());
        collectionImpl.setCompanyId(getCompanyId());
        collectionImpl.setSkipCurate(getSkipCurate());

        collectionImpl.resetOriginalValues();

        return collectionImpl;
    }

    @Override
    public int compareTo(Collection collection) {
        long primaryKey = collection.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Collection)) {
            return false;
        }

        Collection collection = (Collection) obj;

        long primaryKey = collection.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CollectionModelImpl collectionModelImpl = this;

        collectionModelImpl._originalCollectionId = collectionModelImpl._collectionId;

        collectionModelImpl._setOriginalCollectionId = false;

        collectionModelImpl._originalTitle = collectionModelImpl._title;

        collectionModelImpl._originalGroupId = collectionModelImpl._groupId;

        collectionModelImpl._setOriginalGroupId = false;

        collectionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Collection> toCacheModel() {
        CollectionCacheModel collectionCacheModel = new CollectionCacheModel();

        collectionCacheModel.collectionId = getCollectionId();

        collectionCacheModel.title = getTitle();

        String title = collectionCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            collectionCacheModel.title = null;
        }

        collectionCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            collectionCacheModel.createDate = createDate.getTime();
        } else {
            collectionCacheModel.createDate = Long.MIN_VALUE;
        }

        collectionCacheModel.description = getDescription();

        String description = collectionCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            collectionCacheModel.description = null;
        }

        collectionCacheModel.usageRight = getUsageRight();

        String usageRight = collectionCacheModel.usageRight;

        if ((usageRight != null) && (usageRight.length() == 0)) {
            collectionCacheModel.usageRight = null;
        }

        collectionCacheModel.doi = getDoi();

        String doi = collectionCacheModel.doi;

        if ((doi != null) && (doi.length() == 0)) {
            collectionCacheModel.doi = null;
        }

        collectionCacheModel.accessPolicy = getAccessPolicy();

        collectionCacheModel.groupId = getGroupId();

        collectionCacheModel.companyId = getCompanyId();

        collectionCacheModel.skipCurate = getSkipCurate();

        return collectionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(23);

        sb.append("{collectionId=");
        sb.append(getCollectionId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", usageRight=");
        sb.append(getUsageRight());
        sb.append(", doi=");
        sb.append(getDoi());
        sb.append(", accessPolicy=");
        sb.append(getAccessPolicy());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", skipCurate=");
        sb.append(getSkipCurate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(37);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.Collection");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>collectionId</column-name><column-value><![CDATA[");
        sb.append(getCollectionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>usageRight</column-name><column-value><![CDATA[");
        sb.append(getUsageRight());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>doi</column-name><column-value><![CDATA[");
        sb.append(getDoi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>accessPolicy</column-name><column-value><![CDATA[");
        sb.append(getAccessPolicy());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>skipCurate</column-name><column-value><![CDATA[");
        sb.append(getSkipCurate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
