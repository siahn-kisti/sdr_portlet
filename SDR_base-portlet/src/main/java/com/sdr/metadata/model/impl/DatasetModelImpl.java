package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.Dataset;
import com.sdr.metadata.model.DatasetModel;
import com.sdr.metadata.model.DatasetSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Dataset service. Represents a row in the &quot;sdr_Dataset&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.DatasetModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DatasetImpl}.
 * </p>
 *
 * @author jaesung
 * @see DatasetImpl
 * @see com.sdr.metadata.model.Dataset
 * @see com.sdr.metadata.model.DatasetModel
 * @generated
 */
@JSON(strict = true)
public class DatasetModelImpl extends BaseModelImpl<Dataset>
    implements DatasetModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a dataset model instance should use the {@link com.sdr.metadata.model.Dataset} interface instead.
     */
    public static final String TABLE_NAME = "sdr_Dataset";
    public static final Object[][] TABLE_COLUMNS = {
            { "datasetId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "descriptiveMetadata", Types.VARCHAR },
            { "provenanceMetadata", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "location", Types.VARCHAR },
            { "metalocation", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "publishDate", Types.TIMESTAMP },
            { "version", Types.BIGINT },
            { "checksum", Types.VARCHAR },
            { "doi", Types.VARCHAR },
            { "remote", Types.BOOLEAN },
            { "repository", Types.INTEGER },
            { "fileFinalized", Types.BOOLEAN },
            { "fileNum", Types.INTEGER },
            { "hashcode", Types.INTEGER },
            { "curateSignature", Types.INTEGER },
            { "retrieveSignature", Types.INTEGER },
            { "curateLogCode", Types.INTEGER },
            { "curateLogDate", Types.TIMESTAMP },
            { "curateErrorCode", Types.INTEGER },
            { "status", Types.INTEGER },
            { "statusByUserId", Types.BIGINT },
            { "statusByUserName", Types.VARCHAR },
            { "statusDate", Types.TIMESTAMP },
            { "collectionId", Types.BIGINT },
            { "dataTypeId", Types.BIGINT },
            { "ppLogicId", Types.BIGINT },
            { "curateId", Types.BIGINT },
            { "parent", Types.BIGINT },
            { "grId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_Dataset (datasetId LONG not null primary key,title VARCHAR(200) null,descriptiveMetadata TEXT null,provenanceMetadata TEXT null,description STRING null,location VARCHAR(200) null,metalocation VARCHAR(200) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,publishDate DATE null,version LONG,checksum VARCHAR(200) null,doi VARCHAR(100) null,remote BOOLEAN,repository INTEGER,fileFinalized BOOLEAN,fileNum INTEGER,hashcode INTEGER,curateSignature INTEGER,retrieveSignature INTEGER,curateLogCode INTEGER,curateLogDate DATE null,curateErrorCode INTEGER,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,collectionId LONG,dataTypeId LONG,ppLogicId LONG,curateId LONG,parent LONG,grId LONG)";
    public static final String TABLE_SQL_DROP = "drop table sdr_Dataset";
    public static final String ORDER_BY_JPQL = " ORDER BY dataset.datasetId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_Dataset.datasetId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.Dataset"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.Dataset"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.Dataset"),
            true);
    public static long COLLECTIONID_COLUMN_BITMASK = 1L;
    public static long DATATYPEID_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static long HASHCODE_COLUMN_BITMASK = 8L;
    public static long PARENT_COLUMN_BITMASK = 16L;
    public static long STATUS_COLUMN_BITMASK = 32L;
    public static long USERID_COLUMN_BITMASK = 64L;
    public static long VERSION_COLUMN_BITMASK = 128L;
    public static long DATASETID_COLUMN_BITMASK = 256L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.Dataset"));
    private static ClassLoader _classLoader = Dataset.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Dataset.class
        };
    private long _datasetId;
    private String _title;
    private String _descriptiveMetadata;
    private String _provenanceMetadata;
    private String _description;
    private String _location;
    private String _metalocation;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _userName;
    private Date _createDate;
    private Date _publishDate;
    private long _version;
    private long _originalVersion;
    private boolean _setOriginalVersion;
    private String _checksum;
    private String _doi;
    private boolean _remote;
    private int _repository;
    private boolean _fileFinalized;
    private int _fileNum;
    private int _hashcode;
    private int _originalHashcode;
    private boolean _setOriginalHashcode;
    private int _curateSignature;
    private int _retrieveSignature;
    private int _curateLogCode;
    private Date _curateLogDate;
    private int _curateErrorCode;
    private int _status;
    private int _originalStatus;
    private boolean _setOriginalStatus;
    private long _statusByUserId;
    private String _statusByUserUuid;
    private String _statusByUserName;
    private Date _statusDate;
    private long _collectionId;
    private long _originalCollectionId;
    private boolean _setOriginalCollectionId;
    private long _dataTypeId;
    private long _originalDataTypeId;
    private boolean _setOriginalDataTypeId;
    private long _ppLogicId;
    private long _curateId;
    private long _parent;
    private long _originalParent;
    private boolean _setOriginalParent;
    private long _grId;
    private long _columnBitmask;
    private Dataset _escapedModel;

    public DatasetModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Dataset toModel(DatasetSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Dataset model = new DatasetImpl();

        model.setDatasetId(soapModel.getDatasetId());
        model.setTitle(soapModel.getTitle());
        model.setDescriptiveMetadata(soapModel.getDescriptiveMetadata());
        model.setProvenanceMetadata(soapModel.getProvenanceMetadata());
        model.setDescription(soapModel.getDescription());
        model.setLocation(soapModel.getLocation());
        model.setMetalocation(soapModel.getMetalocation());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setPublishDate(soapModel.getPublishDate());
        model.setVersion(soapModel.getVersion());
        model.setChecksum(soapModel.getChecksum());
        model.setDoi(soapModel.getDoi());
        model.setRemote(soapModel.getRemote());
        model.setRepository(soapModel.getRepository());
        model.setFileFinalized(soapModel.getFileFinalized());
        model.setFileNum(soapModel.getFileNum());
        model.setHashcode(soapModel.getHashcode());
        model.setCurateSignature(soapModel.getCurateSignature());
        model.setRetrieveSignature(soapModel.getRetrieveSignature());
        model.setCurateLogCode(soapModel.getCurateLogCode());
        model.setCurateLogDate(soapModel.getCurateLogDate());
        model.setCurateErrorCode(soapModel.getCurateErrorCode());
        model.setStatus(soapModel.getStatus());
        model.setStatusByUserId(soapModel.getStatusByUserId());
        model.setStatusByUserName(soapModel.getStatusByUserName());
        model.setStatusDate(soapModel.getStatusDate());
        model.setCollectionId(soapModel.getCollectionId());
        model.setDataTypeId(soapModel.getDataTypeId());
        model.setPpLogicId(soapModel.getPpLogicId());
        model.setCurateId(soapModel.getCurateId());
        model.setParent(soapModel.getParent());
        model.setGrId(soapModel.getGrId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Dataset> toModels(DatasetSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Dataset> models = new ArrayList<Dataset>(soapModels.length);

        for (DatasetSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _datasetId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDatasetId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _datasetId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Dataset.class;
    }

    @Override
    public String getModelClassName() {
        return Dataset.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("datasetId", getDatasetId());
        attributes.put("title", getTitle());
        attributes.put("descriptiveMetadata", getDescriptiveMetadata());
        attributes.put("provenanceMetadata", getProvenanceMetadata());
        attributes.put("description", getDescription());
        attributes.put("location", getLocation());
        attributes.put("metalocation", getMetalocation());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("publishDate", getPublishDate());
        attributes.put("version", getVersion());
        attributes.put("checksum", getChecksum());
        attributes.put("doi", getDoi());
        attributes.put("remote", getRemote());
        attributes.put("repository", getRepository());
        attributes.put("fileFinalized", getFileFinalized());
        attributes.put("fileNum", getFileNum());
        attributes.put("hashcode", getHashcode());
        attributes.put("curateSignature", getCurateSignature());
        attributes.put("retrieveSignature", getRetrieveSignature());
        attributes.put("curateLogCode", getCurateLogCode());
        attributes.put("curateLogDate", getCurateLogDate());
        attributes.put("curateErrorCode", getCurateErrorCode());
        attributes.put("status", getStatus());
        attributes.put("statusByUserId", getStatusByUserId());
        attributes.put("statusByUserName", getStatusByUserName());
        attributes.put("statusDate", getStatusDate());
        attributes.put("collectionId", getCollectionId());
        attributes.put("dataTypeId", getDataTypeId());
        attributes.put("ppLogicId", getPpLogicId());
        attributes.put("curateId", getCurateId());
        attributes.put("parent", getParent());
        attributes.put("grId", getGrId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long datasetId = (Long) attributes.get("datasetId");

        if (datasetId != null) {
            setDatasetId(datasetId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String descriptiveMetadata = (String) attributes.get(
                "descriptiveMetadata");

        if (descriptiveMetadata != null) {
            setDescriptiveMetadata(descriptiveMetadata);
        }

        String provenanceMetadata = (String) attributes.get(
                "provenanceMetadata");

        if (provenanceMetadata != null) {
            setProvenanceMetadata(provenanceMetadata);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String location = (String) attributes.get("location");

        if (location != null) {
            setLocation(location);
        }

        String metalocation = (String) attributes.get("metalocation");

        if (metalocation != null) {
            setMetalocation(metalocation);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date publishDate = (Date) attributes.get("publishDate");

        if (publishDate != null) {
            setPublishDate(publishDate);
        }

        Long version = (Long) attributes.get("version");

        if (version != null) {
            setVersion(version);
        }

        String checksum = (String) attributes.get("checksum");

        if (checksum != null) {
            setChecksum(checksum);
        }

        String doi = (String) attributes.get("doi");

        if (doi != null) {
            setDoi(doi);
        }

        Boolean remote = (Boolean) attributes.get("remote");

        if (remote != null) {
            setRemote(remote);
        }

        Integer repository = (Integer) attributes.get("repository");

        if (repository != null) {
            setRepository(repository);
        }

        Boolean fileFinalized = (Boolean) attributes.get("fileFinalized");

        if (fileFinalized != null) {
            setFileFinalized(fileFinalized);
        }

        Integer fileNum = (Integer) attributes.get("fileNum");

        if (fileNum != null) {
            setFileNum(fileNum);
        }

        Integer hashcode = (Integer) attributes.get("hashcode");

        if (hashcode != null) {
            setHashcode(hashcode);
        }

        Integer curateSignature = (Integer) attributes.get("curateSignature");

        if (curateSignature != null) {
            setCurateSignature(curateSignature);
        }

        Integer retrieveSignature = (Integer) attributes.get(
                "retrieveSignature");

        if (retrieveSignature != null) {
            setRetrieveSignature(retrieveSignature);
        }

        Integer curateLogCode = (Integer) attributes.get("curateLogCode");

        if (curateLogCode != null) {
            setCurateLogCode(curateLogCode);
        }

        Date curateLogDate = (Date) attributes.get("curateLogDate");

        if (curateLogDate != null) {
            setCurateLogDate(curateLogDate);
        }

        Integer curateErrorCode = (Integer) attributes.get("curateErrorCode");

        if (curateErrorCode != null) {
            setCurateErrorCode(curateErrorCode);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long statusByUserId = (Long) attributes.get("statusByUserId");

        if (statusByUserId != null) {
            setStatusByUserId(statusByUserId);
        }

        String statusByUserName = (String) attributes.get("statusByUserName");

        if (statusByUserName != null) {
            setStatusByUserName(statusByUserName);
        }

        Date statusDate = (Date) attributes.get("statusDate");

        if (statusDate != null) {
            setStatusDate(statusDate);
        }

        Long collectionId = (Long) attributes.get("collectionId");

        if (collectionId != null) {
            setCollectionId(collectionId);
        }

        Long dataTypeId = (Long) attributes.get("dataTypeId");

        if (dataTypeId != null) {
            setDataTypeId(dataTypeId);
        }

        Long ppLogicId = (Long) attributes.get("ppLogicId");

        if (ppLogicId != null) {
            setPpLogicId(ppLogicId);
        }

        Long curateId = (Long) attributes.get("curateId");

        if (curateId != null) {
            setCurateId(curateId);
        }

        Long parent = (Long) attributes.get("parent");

        if (parent != null) {
            setParent(parent);
        }

        Long grId = (Long) attributes.get("grId");

        if (grId != null) {
            setGrId(grId);
        }
    }

    @JSON
    @Override
    public long getDatasetId() {
        return _datasetId;
    }

    @Override
    public void setDatasetId(long datasetId) {
        _columnBitmask = -1L;

        _datasetId = datasetId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getDescriptiveMetadata() {
        if (_descriptiveMetadata == null) {
            return StringPool.BLANK;
        } else {
            return _descriptiveMetadata;
        }
    }

    @Override
    public void setDescriptiveMetadata(String descriptiveMetadata) {
        _descriptiveMetadata = descriptiveMetadata;
    }

    @JSON
    @Override
    public String getProvenanceMetadata() {
        if (_provenanceMetadata == null) {
            return StringPool.BLANK;
        } else {
            return _provenanceMetadata;
        }
    }

    @Override
    public void setProvenanceMetadata(String provenanceMetadata) {
        _provenanceMetadata = provenanceMetadata;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public String getLocation() {
        if (_location == null) {
            return StringPool.BLANK;
        } else {
            return _location;
        }
    }

    @Override
    public void setLocation(String location) {
        _location = location;
    }

    @JSON
    @Override
    public String getMetalocation() {
        if (_metalocation == null) {
            return StringPool.BLANK;
        } else {
            return _metalocation;
        }
    }

    @Override
    public void setMetalocation(String metalocation) {
        _metalocation = metalocation;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getPublishDate() {
        return _publishDate;
    }

    @Override
    public void setPublishDate(Date publishDate) {
        _publishDate = publishDate;
    }

    @JSON
    @Override
    public long getVersion() {
        return _version;
    }

    @Override
    public void setVersion(long version) {
        _columnBitmask |= VERSION_COLUMN_BITMASK;

        if (!_setOriginalVersion) {
            _setOriginalVersion = true;

            _originalVersion = _version;
        }

        _version = version;
    }

    public long getOriginalVersion() {
        return _originalVersion;
    }

    @JSON
    @Override
    public String getChecksum() {
        if (_checksum == null) {
            return StringPool.BLANK;
        } else {
            return _checksum;
        }
    }

    @Override
    public void setChecksum(String checksum) {
        _checksum = checksum;
    }

    @JSON
    @Override
    public String getDoi() {
        if (_doi == null) {
            return StringPool.BLANK;
        } else {
            return _doi;
        }
    }

    @Override
    public void setDoi(String doi) {
        _doi = doi;
    }

    @JSON
    @Override
    public boolean getRemote() {
        return _remote;
    }

    @Override
    public boolean isRemote() {
        return _remote;
    }

    @Override
    public void setRemote(boolean remote) {
        _remote = remote;
    }

    @JSON
    @Override
    public int getRepository() {
        return _repository;
    }

    @Override
    public void setRepository(int repository) {
        _repository = repository;
    }

    @JSON
    @Override
    public boolean getFileFinalized() {
        return _fileFinalized;
    }

    @Override
    public boolean isFileFinalized() {
        return _fileFinalized;
    }

    @Override
    public void setFileFinalized(boolean fileFinalized) {
        _fileFinalized = fileFinalized;
    }

    @JSON
    @Override
    public int getFileNum() {
        return _fileNum;
    }

    @Override
    public void setFileNum(int fileNum) {
        _fileNum = fileNum;
    }

    @JSON
    @Override
    public int getHashcode() {
        return _hashcode;
    }

    @Override
    public void setHashcode(int hashcode) {
        _columnBitmask |= HASHCODE_COLUMN_BITMASK;

        if (!_setOriginalHashcode) {
            _setOriginalHashcode = true;

            _originalHashcode = _hashcode;
        }

        _hashcode = hashcode;
    }

    public int getOriginalHashcode() {
        return _originalHashcode;
    }

    @JSON
    @Override
    public int getCurateSignature() {
        return _curateSignature;
    }

    @Override
    public void setCurateSignature(int curateSignature) {
        _curateSignature = curateSignature;
    }

    @JSON
    @Override
    public int getRetrieveSignature() {
        return _retrieveSignature;
    }

    @Override
    public void setRetrieveSignature(int retrieveSignature) {
        _retrieveSignature = retrieveSignature;
    }

    @JSON
    @Override
    public int getCurateLogCode() {
        return _curateLogCode;
    }

    @Override
    public void setCurateLogCode(int curateLogCode) {
        _curateLogCode = curateLogCode;
    }

    @JSON
    @Override
    public Date getCurateLogDate() {
        return _curateLogDate;
    }

    @Override
    public void setCurateLogDate(Date curateLogDate) {
        _curateLogDate = curateLogDate;
    }

    @JSON
    @Override
    public int getCurateErrorCode() {
        return _curateErrorCode;
    }

    @Override
    public void setCurateErrorCode(int curateErrorCode) {
        _curateErrorCode = curateErrorCode;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public int getOriginalStatus() {
        return _originalStatus;
    }

    @JSON
    @Override
    public long getStatusByUserId() {
        return _statusByUserId;
    }

    @Override
    public void setStatusByUserId(long statusByUserId) {
        _statusByUserId = statusByUserId;
    }

    @Override
    public String getStatusByUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
            _statusByUserUuid);
    }

    @Override
    public void setStatusByUserUuid(String statusByUserUuid) {
        _statusByUserUuid = statusByUserUuid;
    }

    @JSON
    @Override
    public String getStatusByUserName() {
        if (_statusByUserName == null) {
            return StringPool.BLANK;
        } else {
            return _statusByUserName;
        }
    }

    @Override
    public void setStatusByUserName(String statusByUserName) {
        _statusByUserName = statusByUserName;
    }

    @JSON
    @Override
    public Date getStatusDate() {
        return _statusDate;
    }

    @Override
    public void setStatusDate(Date statusDate) {
        _statusDate = statusDate;
    }

    @JSON
    @Override
    public long getCollectionId() {
        return _collectionId;
    }

    @Override
    public void setCollectionId(long collectionId) {
        _columnBitmask |= COLLECTIONID_COLUMN_BITMASK;

        if (!_setOriginalCollectionId) {
            _setOriginalCollectionId = true;

            _originalCollectionId = _collectionId;
        }

        _collectionId = collectionId;
    }

    public long getOriginalCollectionId() {
        return _originalCollectionId;
    }

    @JSON
    @Override
    public long getDataTypeId() {
        return _dataTypeId;
    }

    @Override
    public void setDataTypeId(long dataTypeId) {
        _columnBitmask |= DATATYPEID_COLUMN_BITMASK;

        if (!_setOriginalDataTypeId) {
            _setOriginalDataTypeId = true;

            _originalDataTypeId = _dataTypeId;
        }

        _dataTypeId = dataTypeId;
    }

    public long getOriginalDataTypeId() {
        return _originalDataTypeId;
    }

    @JSON
    @Override
    public long getPpLogicId() {
        return _ppLogicId;
    }

    @Override
    public void setPpLogicId(long ppLogicId) {
        _ppLogicId = ppLogicId;
    }

    @JSON
    @Override
    public long getCurateId() {
        return _curateId;
    }

    @Override
    public void setCurateId(long curateId) {
        _curateId = curateId;
    }

    @JSON
    @Override
    public long getParent() {
        return _parent;
    }

    @Override
    public void setParent(long parent) {
        _columnBitmask |= PARENT_COLUMN_BITMASK;

        if (!_setOriginalParent) {
            _setOriginalParent = true;

            _originalParent = _parent;
        }

        _parent = parent;
    }

    public long getOriginalParent() {
        return _originalParent;
    }

    @JSON
    @Override
    public long getGrId() {
        return _grId;
    }

    @Override
    public void setGrId(long grId) {
        _grId = grId;
    }

    /**
     * @deprecated As of 6.1.0, replaced by {@link #isApproved}
     */
    @Override
    public boolean getApproved() {
        return isApproved();
    }

    @Override
    public boolean isApproved() {
        if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDenied() {
        if (getStatus() == WorkflowConstants.STATUS_DENIED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isDraft() {
        if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isExpired() {
        if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isInactive() {
        if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isIncomplete() {
        if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isPending() {
        if (getStatus() == WorkflowConstants.STATUS_PENDING) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public boolean isScheduled() {
        if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
            return true;
        } else {
            return false;
        }
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Dataset.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Dataset toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Dataset) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DatasetImpl datasetImpl = new DatasetImpl();

        datasetImpl.setDatasetId(getDatasetId());
        datasetImpl.setTitle(getTitle());
        datasetImpl.setDescriptiveMetadata(getDescriptiveMetadata());
        datasetImpl.setProvenanceMetadata(getProvenanceMetadata());
        datasetImpl.setDescription(getDescription());
        datasetImpl.setLocation(getLocation());
        datasetImpl.setMetalocation(getMetalocation());
        datasetImpl.setGroupId(getGroupId());
        datasetImpl.setCompanyId(getCompanyId());
        datasetImpl.setUserId(getUserId());
        datasetImpl.setUserName(getUserName());
        datasetImpl.setCreateDate(getCreateDate());
        datasetImpl.setPublishDate(getPublishDate());
        datasetImpl.setVersion(getVersion());
        datasetImpl.setChecksum(getChecksum());
        datasetImpl.setDoi(getDoi());
        datasetImpl.setRemote(getRemote());
        datasetImpl.setRepository(getRepository());
        datasetImpl.setFileFinalized(getFileFinalized());
        datasetImpl.setFileNum(getFileNum());
        datasetImpl.setHashcode(getHashcode());
        datasetImpl.setCurateSignature(getCurateSignature());
        datasetImpl.setRetrieveSignature(getRetrieveSignature());
        datasetImpl.setCurateLogCode(getCurateLogCode());
        datasetImpl.setCurateLogDate(getCurateLogDate());
        datasetImpl.setCurateErrorCode(getCurateErrorCode());
        datasetImpl.setStatus(getStatus());
        datasetImpl.setStatusByUserId(getStatusByUserId());
        datasetImpl.setStatusByUserName(getStatusByUserName());
        datasetImpl.setStatusDate(getStatusDate());
        datasetImpl.setCollectionId(getCollectionId());
        datasetImpl.setDataTypeId(getDataTypeId());
        datasetImpl.setPpLogicId(getPpLogicId());
        datasetImpl.setCurateId(getCurateId());
        datasetImpl.setParent(getParent());
        datasetImpl.setGrId(getGrId());

        datasetImpl.resetOriginalValues();

        return datasetImpl;
    }

    @Override
    public int compareTo(Dataset dataset) {
        int value = 0;

        if (getDatasetId() < dataset.getDatasetId()) {
            value = -1;
        } else if (getDatasetId() > dataset.getDatasetId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Dataset)) {
            return false;
        }

        Dataset dataset = (Dataset) obj;

        long primaryKey = dataset.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DatasetModelImpl datasetModelImpl = this;

        datasetModelImpl._originalGroupId = datasetModelImpl._groupId;

        datasetModelImpl._setOriginalGroupId = false;

        datasetModelImpl._originalUserId = datasetModelImpl._userId;

        datasetModelImpl._setOriginalUserId = false;

        datasetModelImpl._originalVersion = datasetModelImpl._version;

        datasetModelImpl._setOriginalVersion = false;

        datasetModelImpl._originalHashcode = datasetModelImpl._hashcode;

        datasetModelImpl._setOriginalHashcode = false;

        datasetModelImpl._originalStatus = datasetModelImpl._status;

        datasetModelImpl._setOriginalStatus = false;

        datasetModelImpl._originalCollectionId = datasetModelImpl._collectionId;

        datasetModelImpl._setOriginalCollectionId = false;

        datasetModelImpl._originalDataTypeId = datasetModelImpl._dataTypeId;

        datasetModelImpl._setOriginalDataTypeId = false;

        datasetModelImpl._originalParent = datasetModelImpl._parent;

        datasetModelImpl._setOriginalParent = false;

        datasetModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Dataset> toCacheModel() {
        DatasetCacheModel datasetCacheModel = new DatasetCacheModel();

        datasetCacheModel.datasetId = getDatasetId();

        datasetCacheModel.title = getTitle();

        String title = datasetCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            datasetCacheModel.title = null;
        }

        datasetCacheModel.descriptiveMetadata = getDescriptiveMetadata();

        String descriptiveMetadata = datasetCacheModel.descriptiveMetadata;

        if ((descriptiveMetadata != null) &&
                (descriptiveMetadata.length() == 0)) {
            datasetCacheModel.descriptiveMetadata = null;
        }

        datasetCacheModel.provenanceMetadata = getProvenanceMetadata();

        String provenanceMetadata = datasetCacheModel.provenanceMetadata;

        if ((provenanceMetadata != null) && (provenanceMetadata.length() == 0)) {
            datasetCacheModel.provenanceMetadata = null;
        }

        datasetCacheModel.description = getDescription();

        String description = datasetCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            datasetCacheModel.description = null;
        }

        datasetCacheModel.location = getLocation();

        String location = datasetCacheModel.location;

        if ((location != null) && (location.length() == 0)) {
            datasetCacheModel.location = null;
        }

        datasetCacheModel.metalocation = getMetalocation();

        String metalocation = datasetCacheModel.metalocation;

        if ((metalocation != null) && (metalocation.length() == 0)) {
            datasetCacheModel.metalocation = null;
        }

        datasetCacheModel.groupId = getGroupId();

        datasetCacheModel.companyId = getCompanyId();

        datasetCacheModel.userId = getUserId();

        datasetCacheModel.userName = getUserName();

        String userName = datasetCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            datasetCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            datasetCacheModel.createDate = createDate.getTime();
        } else {
            datasetCacheModel.createDate = Long.MIN_VALUE;
        }

        Date publishDate = getPublishDate();

        if (publishDate != null) {
            datasetCacheModel.publishDate = publishDate.getTime();
        } else {
            datasetCacheModel.publishDate = Long.MIN_VALUE;
        }

        datasetCacheModel.version = getVersion();

        datasetCacheModel.checksum = getChecksum();

        String checksum = datasetCacheModel.checksum;

        if ((checksum != null) && (checksum.length() == 0)) {
            datasetCacheModel.checksum = null;
        }

        datasetCacheModel.doi = getDoi();

        String doi = datasetCacheModel.doi;

        if ((doi != null) && (doi.length() == 0)) {
            datasetCacheModel.doi = null;
        }

        datasetCacheModel.remote = getRemote();

        datasetCacheModel.repository = getRepository();

        datasetCacheModel.fileFinalized = getFileFinalized();

        datasetCacheModel.fileNum = getFileNum();

        datasetCacheModel.hashcode = getHashcode();

        datasetCacheModel.curateSignature = getCurateSignature();

        datasetCacheModel.retrieveSignature = getRetrieveSignature();

        datasetCacheModel.curateLogCode = getCurateLogCode();

        Date curateLogDate = getCurateLogDate();

        if (curateLogDate != null) {
            datasetCacheModel.curateLogDate = curateLogDate.getTime();
        } else {
            datasetCacheModel.curateLogDate = Long.MIN_VALUE;
        }

        datasetCacheModel.curateErrorCode = getCurateErrorCode();

        datasetCacheModel.status = getStatus();

        datasetCacheModel.statusByUserId = getStatusByUserId();

        datasetCacheModel.statusByUserName = getStatusByUserName();

        String statusByUserName = datasetCacheModel.statusByUserName;

        if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
            datasetCacheModel.statusByUserName = null;
        }

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            datasetCacheModel.statusDate = statusDate.getTime();
        } else {
            datasetCacheModel.statusDate = Long.MIN_VALUE;
        }

        datasetCacheModel.collectionId = getCollectionId();

        datasetCacheModel.dataTypeId = getDataTypeId();

        datasetCacheModel.ppLogicId = getPpLogicId();

        datasetCacheModel.curateId = getCurateId();

        datasetCacheModel.parent = getParent();

        datasetCacheModel.grId = getGrId();

        return datasetCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(73);

        sb.append("{datasetId=");
        sb.append(getDatasetId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", descriptiveMetadata=");
        sb.append(getDescriptiveMetadata());
        sb.append(", provenanceMetadata=");
        sb.append(getProvenanceMetadata());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", location=");
        sb.append(getLocation());
        sb.append(", metalocation=");
        sb.append(getMetalocation());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", publishDate=");
        sb.append(getPublishDate());
        sb.append(", version=");
        sb.append(getVersion());
        sb.append(", checksum=");
        sb.append(getChecksum());
        sb.append(", doi=");
        sb.append(getDoi());
        sb.append(", remote=");
        sb.append(getRemote());
        sb.append(", repository=");
        sb.append(getRepository());
        sb.append(", fileFinalized=");
        sb.append(getFileFinalized());
        sb.append(", fileNum=");
        sb.append(getFileNum());
        sb.append(", hashcode=");
        sb.append(getHashcode());
        sb.append(", curateSignature=");
        sb.append(getCurateSignature());
        sb.append(", retrieveSignature=");
        sb.append(getRetrieveSignature());
        sb.append(", curateLogCode=");
        sb.append(getCurateLogCode());
        sb.append(", curateLogDate=");
        sb.append(getCurateLogDate());
        sb.append(", curateErrorCode=");
        sb.append(getCurateErrorCode());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", statusByUserId=");
        sb.append(getStatusByUserId());
        sb.append(", statusByUserName=");
        sb.append(getStatusByUserName());
        sb.append(", statusDate=");
        sb.append(getStatusDate());
        sb.append(", collectionId=");
        sb.append(getCollectionId());
        sb.append(", dataTypeId=");
        sb.append(getDataTypeId());
        sb.append(", ppLogicId=");
        sb.append(getPpLogicId());
        sb.append(", curateId=");
        sb.append(getCurateId());
        sb.append(", parent=");
        sb.append(getParent());
        sb.append(", grId=");
        sb.append(getGrId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(112);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.Dataset");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>datasetId</column-name><column-value><![CDATA[");
        sb.append(getDatasetId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>descriptiveMetadata</column-name><column-value><![CDATA[");
        sb.append(getDescriptiveMetadata());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>provenanceMetadata</column-name><column-value><![CDATA[");
        sb.append(getProvenanceMetadata());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>location</column-name><column-value><![CDATA[");
        sb.append(getLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>metalocation</column-name><column-value><![CDATA[");
        sb.append(getMetalocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>publishDate</column-name><column-value><![CDATA[");
        sb.append(getPublishDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>version</column-name><column-value><![CDATA[");
        sb.append(getVersion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>checksum</column-name><column-value><![CDATA[");
        sb.append(getChecksum());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>doi</column-name><column-value><![CDATA[");
        sb.append(getDoi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>remote</column-name><column-value><![CDATA[");
        sb.append(getRemote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>repository</column-name><column-value><![CDATA[");
        sb.append(getRepository());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileFinalized</column-name><column-value><![CDATA[");
        sb.append(getFileFinalized());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileNum</column-name><column-value><![CDATA[");
        sb.append(getFileNum());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>hashcode</column-name><column-value><![CDATA[");
        sb.append(getHashcode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>curateSignature</column-name><column-value><![CDATA[");
        sb.append(getCurateSignature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>retrieveSignature</column-name><column-value><![CDATA[");
        sb.append(getRetrieveSignature());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>curateLogCode</column-name><column-value><![CDATA[");
        sb.append(getCurateLogCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>curateLogDate</column-name><column-value><![CDATA[");
        sb.append(getCurateLogDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>curateErrorCode</column-name><column-value><![CDATA[");
        sb.append(getCurateErrorCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusDate</column-name><column-value><![CDATA[");
        sb.append(getStatusDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>collectionId</column-name><column-value><![CDATA[");
        sb.append(getCollectionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataTypeId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>ppLogicId</column-name><column-value><![CDATA[");
        sb.append(getPpLogicId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>curateId</column-name><column-value><![CDATA[");
        sb.append(getCurateId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parent</column-name><column-value><![CDATA[");
        sb.append(getParent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grId</column-name><column-value><![CDATA[");
        sb.append(getGrId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
