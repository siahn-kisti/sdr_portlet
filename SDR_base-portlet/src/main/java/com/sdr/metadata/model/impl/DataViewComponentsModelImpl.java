package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.DataViewComponents;
import com.sdr.metadata.model.DataViewComponentsModel;
import com.sdr.metadata.model.DataViewComponentsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DataViewComponents service. Represents a row in the &quot;sdr_DataViewComponents&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.DataViewComponentsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DataViewComponentsImpl}.
 * </p>
 *
 * @author jaesung
 * @see DataViewComponentsImpl
 * @see com.sdr.metadata.model.DataViewComponents
 * @see com.sdr.metadata.model.DataViewComponentsModel
 * @generated
 */
@JSON(strict = true)
public class DataViewComponentsModelImpl extends BaseModelImpl<DataViewComponents>
    implements DataViewComponentsModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a data view components model instance should use the {@link com.sdr.metadata.model.DataViewComponents} interface instead.
     */
    public static final String TABLE_NAME = "sdr_DataViewComponents";
    public static final Object[][] TABLE_COLUMNS = {
            { "dataViewComponentsId", Types.BIGINT },
            { "compGroup", Types.VARCHAR },
            { "compName", Types.VARCHAR },
            { "image", Types.VARCHAR },
            { "html", Types.VARCHAR },
            { "script", Types.VARCHAR },
            { "properties", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "orderNo", Types.INTEGER },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "status", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_DataViewComponents (dataViewComponentsId LONG not null primary key,compGroup VARCHAR(100) null,compName VARCHAR(100) null,image VARCHAR(200) null,html STRING null,script STRING null,properties STRING null,description STRING null,orderNo INTEGER,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,status INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table sdr_DataViewComponents";
    public static final String ORDER_BY_JPQL = " ORDER BY dataViewComponents.dataViewComponentsId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_DataViewComponents.dataViewComponentsId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.DataViewComponents"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.DataViewComponents"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.metadata.model.DataViewComponents"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static long DATAVIEWCOMPONENTSID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.DataViewComponents"));
    private static ClassLoader _classLoader = DataViewComponents.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DataViewComponents.class
        };
    private long _dataViewComponentsId;
    private String _compGroup;
    private String _compName;
    private String _image;
    private String _html;
    private String _script;
    private String _properties;
    private String _description;
    private int _orderNo;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private Date _createDate;
    private Date _modifiedDate;
    private int _status;
    private long _columnBitmask;
    private DataViewComponents _escapedModel;

    public DataViewComponentsModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DataViewComponents toModel(DataViewComponentsSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        DataViewComponents model = new DataViewComponentsImpl();

        model.setDataViewComponentsId(soapModel.getDataViewComponentsId());
        model.setCompGroup(soapModel.getCompGroup());
        model.setCompName(soapModel.getCompName());
        model.setImage(soapModel.getImage());
        model.setHtml(soapModel.getHtml());
        model.setScript(soapModel.getScript());
        model.setProperties(soapModel.getProperties());
        model.setDescription(soapModel.getDescription());
        model.setOrderNo(soapModel.getOrderNo());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setStatus(soapModel.getStatus());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DataViewComponents> toModels(
        DataViewComponentsSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<DataViewComponents> models = new ArrayList<DataViewComponents>(soapModels.length);

        for (DataViewComponentsSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _dataViewComponentsId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDataViewComponentsId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _dataViewComponentsId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return DataViewComponents.class;
    }

    @Override
    public String getModelClassName() {
        return DataViewComponents.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("dataViewComponentsId", getDataViewComponentsId());
        attributes.put("compGroup", getCompGroup());
        attributes.put("compName", getCompName());
        attributes.put("image", getImage());
        attributes.put("html", getHtml());
        attributes.put("script", getScript());
        attributes.put("properties", getProperties());
        attributes.put("description", getDescription());
        attributes.put("orderNo", getOrderNo());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long dataViewComponentsId = (Long) attributes.get(
                "dataViewComponentsId");

        if (dataViewComponentsId != null) {
            setDataViewComponentsId(dataViewComponentsId);
        }

        String compGroup = (String) attributes.get("compGroup");

        if (compGroup != null) {
            setCompGroup(compGroup);
        }

        String compName = (String) attributes.get("compName");

        if (compName != null) {
            setCompName(compName);
        }

        String image = (String) attributes.get("image");

        if (image != null) {
            setImage(image);
        }

        String html = (String) attributes.get("html");

        if (html != null) {
            setHtml(html);
        }

        String script = (String) attributes.get("script");

        if (script != null) {
            setScript(script);
        }

        String properties = (String) attributes.get("properties");

        if (properties != null) {
            setProperties(properties);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Integer orderNo = (Integer) attributes.get("orderNo");

        if (orderNo != null) {
            setOrderNo(orderNo);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @JSON
    @Override
    public long getDataViewComponentsId() {
        return _dataViewComponentsId;
    }

    @Override
    public void setDataViewComponentsId(long dataViewComponentsId) {
        _dataViewComponentsId = dataViewComponentsId;
    }

    @JSON
    @Override
    public String getCompGroup() {
        if (_compGroup == null) {
            return StringPool.BLANK;
        } else {
            return _compGroup;
        }
    }

    @Override
    public void setCompGroup(String compGroup) {
        _compGroup = compGroup;
    }

    @JSON
    @Override
    public String getCompName() {
        if (_compName == null) {
            return StringPool.BLANK;
        } else {
            return _compName;
        }
    }

    @Override
    public void setCompName(String compName) {
        _compName = compName;
    }

    @JSON
    @Override
    public String getImage() {
        if (_image == null) {
            return StringPool.BLANK;
        } else {
            return _image;
        }
    }

    @Override
    public void setImage(String image) {
        _image = image;
    }

    @JSON
    @Override
    public String getHtml() {
        if (_html == null) {
            return StringPool.BLANK;
        } else {
            return _html;
        }
    }

    @Override
    public void setHtml(String html) {
        _html = html;
    }

    @JSON
    @Override
    public String getScript() {
        if (_script == null) {
            return StringPool.BLANK;
        } else {
            return _script;
        }
    }

    @Override
    public void setScript(String script) {
        _script = script;
    }

    @JSON
    @Override
    public String getProperties() {
        if (_properties == null) {
            return StringPool.BLANK;
        } else {
            return _properties;
        }
    }

    @Override
    public void setProperties(String properties) {
        _properties = properties;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public int getOrderNo() {
        return _orderNo;
    }

    @Override
    public void setOrderNo(int orderNo) {
        _orderNo = orderNo;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _status = status;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            DataViewComponents.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public DataViewComponents toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DataViewComponents) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DataViewComponentsImpl dataViewComponentsImpl = new DataViewComponentsImpl();

        dataViewComponentsImpl.setDataViewComponentsId(getDataViewComponentsId());
        dataViewComponentsImpl.setCompGroup(getCompGroup());
        dataViewComponentsImpl.setCompName(getCompName());
        dataViewComponentsImpl.setImage(getImage());
        dataViewComponentsImpl.setHtml(getHtml());
        dataViewComponentsImpl.setScript(getScript());
        dataViewComponentsImpl.setProperties(getProperties());
        dataViewComponentsImpl.setDescription(getDescription());
        dataViewComponentsImpl.setOrderNo(getOrderNo());
        dataViewComponentsImpl.setGroupId(getGroupId());
        dataViewComponentsImpl.setCompanyId(getCompanyId());
        dataViewComponentsImpl.setUserId(getUserId());
        dataViewComponentsImpl.setCreateDate(getCreateDate());
        dataViewComponentsImpl.setModifiedDate(getModifiedDate());
        dataViewComponentsImpl.setStatus(getStatus());

        dataViewComponentsImpl.resetOriginalValues();

        return dataViewComponentsImpl;
    }

    @Override
    public int compareTo(DataViewComponents dataViewComponents) {
        long primaryKey = dataViewComponents.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DataViewComponents)) {
            return false;
        }

        DataViewComponents dataViewComponents = (DataViewComponents) obj;

        long primaryKey = dataViewComponents.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        DataViewComponentsModelImpl dataViewComponentsModelImpl = this;

        dataViewComponentsModelImpl._originalUserId = dataViewComponentsModelImpl._userId;

        dataViewComponentsModelImpl._setOriginalUserId = false;

        dataViewComponentsModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<DataViewComponents> toCacheModel() {
        DataViewComponentsCacheModel dataViewComponentsCacheModel = new DataViewComponentsCacheModel();

        dataViewComponentsCacheModel.dataViewComponentsId = getDataViewComponentsId();

        dataViewComponentsCacheModel.compGroup = getCompGroup();

        String compGroup = dataViewComponentsCacheModel.compGroup;

        if ((compGroup != null) && (compGroup.length() == 0)) {
            dataViewComponentsCacheModel.compGroup = null;
        }

        dataViewComponentsCacheModel.compName = getCompName();

        String compName = dataViewComponentsCacheModel.compName;

        if ((compName != null) && (compName.length() == 0)) {
            dataViewComponentsCacheModel.compName = null;
        }

        dataViewComponentsCacheModel.image = getImage();

        String image = dataViewComponentsCacheModel.image;

        if ((image != null) && (image.length() == 0)) {
            dataViewComponentsCacheModel.image = null;
        }

        dataViewComponentsCacheModel.html = getHtml();

        String html = dataViewComponentsCacheModel.html;

        if ((html != null) && (html.length() == 0)) {
            dataViewComponentsCacheModel.html = null;
        }

        dataViewComponentsCacheModel.script = getScript();

        String script = dataViewComponentsCacheModel.script;

        if ((script != null) && (script.length() == 0)) {
            dataViewComponentsCacheModel.script = null;
        }

        dataViewComponentsCacheModel.properties = getProperties();

        String properties = dataViewComponentsCacheModel.properties;

        if ((properties != null) && (properties.length() == 0)) {
            dataViewComponentsCacheModel.properties = null;
        }

        dataViewComponentsCacheModel.description = getDescription();

        String description = dataViewComponentsCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            dataViewComponentsCacheModel.description = null;
        }

        dataViewComponentsCacheModel.orderNo = getOrderNo();

        dataViewComponentsCacheModel.groupId = getGroupId();

        dataViewComponentsCacheModel.companyId = getCompanyId();

        dataViewComponentsCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            dataViewComponentsCacheModel.createDate = createDate.getTime();
        } else {
            dataViewComponentsCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            dataViewComponentsCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            dataViewComponentsCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        dataViewComponentsCacheModel.status = getStatus();

        return dataViewComponentsCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(31);

        sb.append("{dataViewComponentsId=");
        sb.append(getDataViewComponentsId());
        sb.append(", compGroup=");
        sb.append(getCompGroup());
        sb.append(", compName=");
        sb.append(getCompName());
        sb.append(", image=");
        sb.append(getImage());
        sb.append(", html=");
        sb.append(getHtml());
        sb.append(", script=");
        sb.append(getScript());
        sb.append(", properties=");
        sb.append(getProperties());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", orderNo=");
        sb.append(getOrderNo());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(49);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.DataViewComponents");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>dataViewComponentsId</column-name><column-value><![CDATA[");
        sb.append(getDataViewComponentsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>compGroup</column-name><column-value><![CDATA[");
        sb.append(getCompGroup());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>compName</column-name><column-value><![CDATA[");
        sb.append(getCompName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>image</column-name><column-value><![CDATA[");
        sb.append(getImage());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>html</column-name><column-value><![CDATA[");
        sb.append(getHtml());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>script</column-name><column-value><![CDATA[");
        sb.append(getScript());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>properties</column-name><column-value><![CDATA[");
        sb.append(getProperties());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>orderNo</column-name><column-value><![CDATA[");
        sb.append(getOrderNo());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
