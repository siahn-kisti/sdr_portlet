package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.ApiKey;
import com.sdr.metadata.model.ApiKeyModel;
import com.sdr.metadata.model.ApiKeySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ApiKey service. Represents a row in the &quot;sdr_ApiKey&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.ApiKeyModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApiKeyImpl}.
 * </p>
 *
 * @author jaesung
 * @see ApiKeyImpl
 * @see com.sdr.metadata.model.ApiKey
 * @see com.sdr.metadata.model.ApiKeyModel
 * @generated
 */
@JSON(strict = true)
public class ApiKeyModelImpl extends BaseModelImpl<ApiKey>
    implements ApiKeyModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a api key model instance should use the {@link com.sdr.metadata.model.ApiKey} interface instead.
     */
    public static final String TABLE_NAME = "sdr_ApiKey";
    public static final Object[][] TABLE_COLUMNS = {
            { "userId", Types.BIGINT },
            { "apiKey", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_ApiKey (userId LONG not null primary key,apiKey VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table sdr_ApiKey";
    public static final String ORDER_BY_JPQL = " ORDER BY apiKey.userId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_ApiKey.userId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.ApiKey"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.ApiKey"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.ApiKey"));
    private static ClassLoader _classLoader = ApiKey.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { ApiKey.class };
    private long _userId;
    private String _userUuid;
    private String _apiKey;
    private ApiKey _escapedModel;

    public ApiKeyModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static ApiKey toModel(ApiKeySoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        ApiKey model = new ApiKeyImpl();

        model.setUserId(soapModel.getUserId());
        model.setApiKey(soapModel.getApiKey());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<ApiKey> toModels(ApiKeySoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<ApiKey> models = new ArrayList<ApiKey>(soapModels.length);

        for (ApiKeySoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _userId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setUserId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _userId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ApiKey.class;
    }

    @Override
    public String getModelClassName() {
        return ApiKey.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("userId", getUserId());
        attributes.put("apiKey", getApiKey());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String apiKey = (String) attributes.get("apiKey");

        if (apiKey != null) {
            setApiKey(apiKey);
        }
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getApiKey() {
        if (_apiKey == null) {
            return StringPool.BLANK;
        } else {
            return _apiKey;
        }
    }

    @Override
    public void setApiKey(String apiKey) {
        _apiKey = apiKey;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ApiKey.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ApiKey toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ApiKey) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ApiKeyImpl apiKeyImpl = new ApiKeyImpl();

        apiKeyImpl.setUserId(getUserId());
        apiKeyImpl.setApiKey(getApiKey());

        apiKeyImpl.resetOriginalValues();

        return apiKeyImpl;
    }

    @Override
    public int compareTo(ApiKey apiKey) {
        long primaryKey = apiKey.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ApiKey)) {
            return false;
        }

        ApiKey apiKey = (ApiKey) obj;

        long primaryKey = apiKey.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<ApiKey> toCacheModel() {
        ApiKeyCacheModel apiKeyCacheModel = new ApiKeyCacheModel();

        apiKeyCacheModel.userId = getUserId();

        apiKeyCacheModel.apiKey = getApiKey();

        String apiKey = apiKeyCacheModel.apiKey;

        if ((apiKey != null) && (apiKey.length() == 0)) {
            apiKeyCacheModel.apiKey = null;
        }

        return apiKeyCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(5);

        sb.append("{userId=");
        sb.append(getUserId());
        sb.append(", apiKey=");
        sb.append(getApiKey());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(10);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.ApiKey");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>apiKey</column-name><column-value><![CDATA[");
        sb.append(getApiKey());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
