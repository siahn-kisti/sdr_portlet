package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.PpLogic;
import com.sdr.metadata.model.PpLogicModel;
import com.sdr.metadata.model.PpLogicSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PpLogic service. Represents a row in the &quot;sdr_PpLogic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.PpLogicModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PpLogicImpl}.
 * </p>
 *
 * @author jaesung
 * @see PpLogicImpl
 * @see com.sdr.metadata.model.PpLogic
 * @see com.sdr.metadata.model.PpLogicModel
 * @generated
 */
@JSON(strict = true)
public class PpLogicModelImpl extends BaseModelImpl<PpLogic>
    implements PpLogicModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a pp logic model instance should use the {@link com.sdr.metadata.model.PpLogic} interface instead.
     */
    public static final String TABLE_NAME = "sdr_PpLogic";
    public static final Object[][] TABLE_COLUMNS = {
            { "ppId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "type_", Types.INTEGER },
            { "command", Types.VARCHAR },
            { "dataTypeId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_PpLogic (ppId LONG not null primary key,userId LONG,title VARCHAR(75) null,description VARCHAR(2000) null,type_ INTEGER,command VARCHAR(2000) null,dataTypeId LONG)";
    public static final String TABLE_SQL_DROP = "drop table sdr_PpLogic";
    public static final String ORDER_BY_JPQL = " ORDER BY ppLogic.ppId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_PpLogic.ppId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.PpLogic"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.PpLogic"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.PpLogic"));
    private static ClassLoader _classLoader = PpLogic.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PpLogic.class
        };
    private long _ppId;
    private long _userId;
    private String _userUuid;
    private String _title;
    private String _description;
    private int _type;
    private String _command;
    private long _dataTypeId;
    private PpLogic _escapedModel;

    public PpLogicModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PpLogic toModel(PpLogicSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PpLogic model = new PpLogicImpl();

        model.setPpId(soapModel.getPpId());
        model.setUserId(soapModel.getUserId());
        model.setTitle(soapModel.getTitle());
        model.setDescription(soapModel.getDescription());
        model.setType(soapModel.getType());
        model.setCommand(soapModel.getCommand());
        model.setDataTypeId(soapModel.getDataTypeId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PpLogic> toModels(PpLogicSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PpLogic> models = new ArrayList<PpLogic>(soapModels.length);

        for (PpLogicSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _ppId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPpId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _ppId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PpLogic.class;
    }

    @Override
    public String getModelClassName() {
        return PpLogic.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("ppId", getPpId());
        attributes.put("userId", getUserId());
        attributes.put("title", getTitle());
        attributes.put("description", getDescription());
        attributes.put("type", getType());
        attributes.put("command", getCommand());
        attributes.put("dataTypeId", getDataTypeId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long ppId = (Long) attributes.get("ppId");

        if (ppId != null) {
            setPpId(ppId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Integer type = (Integer) attributes.get("type");

        if (type != null) {
            setType(type);
        }

        String command = (String) attributes.get("command");

        if (command != null) {
            setCommand(command);
        }

        Long dataTypeId = (Long) attributes.get("dataTypeId");

        if (dataTypeId != null) {
            setDataTypeId(dataTypeId);
        }
    }

    @JSON
    @Override
    public long getPpId() {
        return _ppId;
    }

    @Override
    public void setPpId(long ppId) {
        _ppId = ppId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public int getType() {
        return _type;
    }

    @Override
    public void setType(int type) {
        _type = type;
    }

    @JSON
    @Override
    public String getCommand() {
        if (_command == null) {
            return StringPool.BLANK;
        } else {
            return _command;
        }
    }

    @Override
    public void setCommand(String command) {
        _command = command;
    }

    @JSON
    @Override
    public long getDataTypeId() {
        return _dataTypeId;
    }

    @Override
    public void setDataTypeId(long dataTypeId) {
        _dataTypeId = dataTypeId;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            PpLogic.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PpLogic toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PpLogic) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PpLogicImpl ppLogicImpl = new PpLogicImpl();

        ppLogicImpl.setPpId(getPpId());
        ppLogicImpl.setUserId(getUserId());
        ppLogicImpl.setTitle(getTitle());
        ppLogicImpl.setDescription(getDescription());
        ppLogicImpl.setType(getType());
        ppLogicImpl.setCommand(getCommand());
        ppLogicImpl.setDataTypeId(getDataTypeId());

        ppLogicImpl.resetOriginalValues();

        return ppLogicImpl;
    }

    @Override
    public int compareTo(PpLogic ppLogic) {
        long primaryKey = ppLogic.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PpLogic)) {
            return false;
        }

        PpLogic ppLogic = (PpLogic) obj;

        long primaryKey = ppLogic.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<PpLogic> toCacheModel() {
        PpLogicCacheModel ppLogicCacheModel = new PpLogicCacheModel();

        ppLogicCacheModel.ppId = getPpId();

        ppLogicCacheModel.userId = getUserId();

        ppLogicCacheModel.title = getTitle();

        String title = ppLogicCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            ppLogicCacheModel.title = null;
        }

        ppLogicCacheModel.description = getDescription();

        String description = ppLogicCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            ppLogicCacheModel.description = null;
        }

        ppLogicCacheModel.type = getType();

        ppLogicCacheModel.command = getCommand();

        String command = ppLogicCacheModel.command;

        if ((command != null) && (command.length() == 0)) {
            ppLogicCacheModel.command = null;
        }

        ppLogicCacheModel.dataTypeId = getDataTypeId();

        return ppLogicCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{ppId=");
        sb.append(getPpId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", type=");
        sb.append(getType());
        sb.append(", command=");
        sb.append(getCommand());
        sb.append(", dataTypeId=");
        sb.append(getDataTypeId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.PpLogic");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>ppId</column-name><column-value><![CDATA[");
        sb.append(getPpId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>type</column-name><column-value><![CDATA[");
        sb.append(getType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>command</column-name><column-value><![CDATA[");
        sb.append(getCommand());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataTypeId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
