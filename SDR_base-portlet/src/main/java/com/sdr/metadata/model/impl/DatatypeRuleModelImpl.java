package com.sdr.metadata.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.metadata.model.DatatypeRule;
import com.sdr.metadata.model.DatatypeRuleModel;
import com.sdr.metadata.model.DatatypeRuleSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DatatypeRule service. Represents a row in the &quot;sdr_DatatypeRule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.metadata.model.DatatypeRuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DatatypeRuleImpl}.
 * </p>
 *
 * @author jaesung
 * @see DatatypeRuleImpl
 * @see com.sdr.metadata.model.DatatypeRule
 * @see com.sdr.metadata.model.DatatypeRuleModel
 * @generated
 */
@JSON(strict = true)
public class DatatypeRuleModelImpl extends BaseModelImpl<DatatypeRule>
    implements DatatypeRuleModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a datatype rule model instance should use the {@link com.sdr.metadata.model.DatatypeRule} interface instead.
     */
    public static final String TABLE_NAME = "sdr_DatatypeRule";
    public static final Object[][] TABLE_COLUMNS = {
            { "drId", Types.BIGINT },
            { "grId", Types.BIGINT },
            { "dataTypeId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_DatatypeRule (drId LONG not null primary key,grId LONG,dataTypeId LONG)";
    public static final String TABLE_SQL_DROP = "drop table sdr_DatatypeRule";
    public static final String ORDER_BY_JPQL = " ORDER BY datatypeRule.drId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_DatatypeRule.drId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.metadata.model.DatatypeRule"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.metadata.model.DatatypeRule"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.metadata.model.DatatypeRule"));
    private static ClassLoader _classLoader = DatatypeRule.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            DatatypeRule.class
        };
    private long _drId;
    private long _grId;
    private long _dataTypeId;
    private DatatypeRule _escapedModel;

    public DatatypeRuleModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static DatatypeRule toModel(DatatypeRuleSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        DatatypeRule model = new DatatypeRuleImpl();

        model.setDrId(soapModel.getDrId());
        model.setGrId(soapModel.getGrId());
        model.setDataTypeId(soapModel.getDataTypeId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<DatatypeRule> toModels(DatatypeRuleSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<DatatypeRule> models = new ArrayList<DatatypeRule>(soapModels.length);

        for (DatatypeRuleSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _drId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDrId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _drId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return DatatypeRule.class;
    }

    @Override
    public String getModelClassName() {
        return DatatypeRule.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("drId", getDrId());
        attributes.put("grId", getGrId());
        attributes.put("dataTypeId", getDataTypeId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long drId = (Long) attributes.get("drId");

        if (drId != null) {
            setDrId(drId);
        }

        Long grId = (Long) attributes.get("grId");

        if (grId != null) {
            setGrId(grId);
        }

        Long dataTypeId = (Long) attributes.get("dataTypeId");

        if (dataTypeId != null) {
            setDataTypeId(dataTypeId);
        }
    }

    @JSON
    @Override
    public long getDrId() {
        return _drId;
    }

    @Override
    public void setDrId(long drId) {
        _drId = drId;
    }

    @JSON
    @Override
    public long getGrId() {
        return _grId;
    }

    @Override
    public void setGrId(long grId) {
        _grId = grId;
    }

    @JSON
    @Override
    public long getDataTypeId() {
        return _dataTypeId;
    }

    @Override
    public void setDataTypeId(long dataTypeId) {
        _dataTypeId = dataTypeId;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            DatatypeRule.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public DatatypeRule toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (DatatypeRule) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        DatatypeRuleImpl datatypeRuleImpl = new DatatypeRuleImpl();

        datatypeRuleImpl.setDrId(getDrId());
        datatypeRuleImpl.setGrId(getGrId());
        datatypeRuleImpl.setDataTypeId(getDataTypeId());

        datatypeRuleImpl.resetOriginalValues();

        return datatypeRuleImpl;
    }

    @Override
    public int compareTo(DatatypeRule datatypeRule) {
        long primaryKey = datatypeRule.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof DatatypeRule)) {
            return false;
        }

        DatatypeRule datatypeRule = (DatatypeRule) obj;

        long primaryKey = datatypeRule.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<DatatypeRule> toCacheModel() {
        DatatypeRuleCacheModel datatypeRuleCacheModel = new DatatypeRuleCacheModel();

        datatypeRuleCacheModel.drId = getDrId();

        datatypeRuleCacheModel.grId = getGrId();

        datatypeRuleCacheModel.dataTypeId = getDataTypeId();

        return datatypeRuleCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{drId=");
        sb.append(getDrId());
        sb.append(", grId=");
        sb.append(getGrId());
        sb.append(", dataTypeId=");
        sb.append(getDataTypeId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.sdr.metadata.model.DatatypeRule");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>drId</column-name><column-value><![CDATA[");
        sb.append(getDrId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>grId</column-name><column-value><![CDATA[");
        sb.append(getGrId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataTypeId</column-name><column-value><![CDATA[");
        sb.append(getDataTypeId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
