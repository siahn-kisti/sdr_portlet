package com.sdr.bbs.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.sdr.bbs.model.BbsPost;
import com.sdr.bbs.service.BbsPostLocalService;
import com.sdr.bbs.service.persistence.BbsCommentPersistence;
import com.sdr.bbs.service.persistence.BbsPersistence;
import com.sdr.bbs.service.persistence.BbsPostPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the bbs post local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sdr.bbs.service.impl.BbsPostLocalServiceImpl}.
 * </p>
 *
 * @author goopsw
 * @see com.sdr.bbs.service.impl.BbsPostLocalServiceImpl
 * @see com.sdr.bbs.service.BbsPostLocalServiceUtil
 * @generated
 */
public abstract class BbsPostLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements BbsPostLocalService, IdentifiableBean {
    @BeanReference(type = com.sdr.bbs.service.BbsLocalService.class)
    protected com.sdr.bbs.service.BbsLocalService bbsLocalService;
    @BeanReference(type = BbsPersistence.class)
    protected BbsPersistence bbsPersistence;
    @BeanReference(type = com.sdr.bbs.service.BbsCommentLocalService.class)
    protected com.sdr.bbs.service.BbsCommentLocalService bbsCommentLocalService;
    @BeanReference(type = BbsCommentPersistence.class)
    protected BbsCommentPersistence bbsCommentPersistence;
    @BeanReference(type = com.sdr.bbs.service.BbsPostLocalService.class)
    protected com.sdr.bbs.service.BbsPostLocalService bbsPostLocalService;
    @BeanReference(type = BbsPostPersistence.class)
    protected BbsPostPersistence bbsPostPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private BbsPostLocalServiceClpInvoker _clpInvoker = new BbsPostLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.sdr.bbs.service.BbsPostLocalServiceUtil} to access the bbs post local service.
     */

    /**
     * Adds the bbs post to the database. Also notifies the appropriate model listeners.
     *
     * @param bbsPost the bbs post
     * @return the bbs post that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public BbsPost addBbsPost(BbsPost bbsPost) throws SystemException {
        bbsPost.setNew(true);

        return bbsPostPersistence.update(bbsPost);
    }

    /**
     * Creates a new bbs post with the primary key. Does not add the bbs post to the database.
     *
     * @param postId the primary key for the new bbs post
     * @return the new bbs post
     */
    @Override
    public BbsPost createBbsPost(long postId) {
        return bbsPostPersistence.create(postId);
    }

    /**
     * Deletes the bbs post with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param postId the primary key of the bbs post
     * @return the bbs post that was removed
     * @throws PortalException if a bbs post with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public BbsPost deleteBbsPost(long postId)
        throws PortalException, SystemException {
        return bbsPostPersistence.remove(postId);
    }

    /**
     * Deletes the bbs post from the database. Also notifies the appropriate model listeners.
     *
     * @param bbsPost the bbs post
     * @return the bbs post that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public BbsPost deleteBbsPost(BbsPost bbsPost) throws SystemException {
        return bbsPostPersistence.remove(bbsPost);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(BbsPost.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return bbsPostPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sdr.bbs.model.impl.BbsPostModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return bbsPostPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sdr.bbs.model.impl.BbsPostModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return bbsPostPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return bbsPostPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return bbsPostPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public BbsPost fetchBbsPost(long postId) throws SystemException {
        return bbsPostPersistence.fetchByPrimaryKey(postId);
    }

    /**
     * Returns the bbs post with the primary key.
     *
     * @param postId the primary key of the bbs post
     * @return the bbs post
     * @throws PortalException if a bbs post with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public BbsPost getBbsPost(long postId)
        throws PortalException, SystemException {
        return bbsPostPersistence.findByPrimaryKey(postId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return bbsPostPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the bbs posts.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sdr.bbs.model.impl.BbsPostModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of bbs posts
     * @param end the upper bound of the range of bbs posts (not inclusive)
     * @return the range of bbs posts
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<BbsPost> getBbsPosts(int start, int end)
        throws SystemException {
        return bbsPostPersistence.findAll(start, end);
    }

    /**
     * Returns the number of bbs posts.
     *
     * @return the number of bbs posts
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getBbsPostsCount() throws SystemException {
        return bbsPostPersistence.countAll();
    }

    /**
     * Updates the bbs post in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param bbsPost the bbs post
     * @return the bbs post that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public BbsPost updateBbsPost(BbsPost bbsPost) throws SystemException {
        return bbsPostPersistence.update(bbsPost);
    }

    /**
     * Returns the bbs local service.
     *
     * @return the bbs local service
     */
    public com.sdr.bbs.service.BbsLocalService getBbsLocalService() {
        return bbsLocalService;
    }

    /**
     * Sets the bbs local service.
     *
     * @param bbsLocalService the bbs local service
     */
    public void setBbsLocalService(
        com.sdr.bbs.service.BbsLocalService bbsLocalService) {
        this.bbsLocalService = bbsLocalService;
    }

    /**
     * Returns the bbs persistence.
     *
     * @return the bbs persistence
     */
    public BbsPersistence getBbsPersistence() {
        return bbsPersistence;
    }

    /**
     * Sets the bbs persistence.
     *
     * @param bbsPersistence the bbs persistence
     */
    public void setBbsPersistence(BbsPersistence bbsPersistence) {
        this.bbsPersistence = bbsPersistence;
    }

    /**
     * Returns the bbs comment local service.
     *
     * @return the bbs comment local service
     */
    public com.sdr.bbs.service.BbsCommentLocalService getBbsCommentLocalService() {
        return bbsCommentLocalService;
    }

    /**
     * Sets the bbs comment local service.
     *
     * @param bbsCommentLocalService the bbs comment local service
     */
    public void setBbsCommentLocalService(
        com.sdr.bbs.service.BbsCommentLocalService bbsCommentLocalService) {
        this.bbsCommentLocalService = bbsCommentLocalService;
    }

    /**
     * Returns the bbs comment persistence.
     *
     * @return the bbs comment persistence
     */
    public BbsCommentPersistence getBbsCommentPersistence() {
        return bbsCommentPersistence;
    }

    /**
     * Sets the bbs comment persistence.
     *
     * @param bbsCommentPersistence the bbs comment persistence
     */
    public void setBbsCommentPersistence(
        BbsCommentPersistence bbsCommentPersistence) {
        this.bbsCommentPersistence = bbsCommentPersistence;
    }

    /**
     * Returns the bbs post local service.
     *
     * @return the bbs post local service
     */
    public com.sdr.bbs.service.BbsPostLocalService getBbsPostLocalService() {
        return bbsPostLocalService;
    }

    /**
     * Sets the bbs post local service.
     *
     * @param bbsPostLocalService the bbs post local service
     */
    public void setBbsPostLocalService(
        com.sdr.bbs.service.BbsPostLocalService bbsPostLocalService) {
        this.bbsPostLocalService = bbsPostLocalService;
    }

    /**
     * Returns the bbs post persistence.
     *
     * @return the bbs post persistence
     */
    public BbsPostPersistence getBbsPostPersistence() {
        return bbsPostPersistence;
    }

    /**
     * Sets the bbs post persistence.
     *
     * @param bbsPostPersistence the bbs post persistence
     */
    public void setBbsPostPersistence(BbsPostPersistence bbsPostPersistence) {
        this.bbsPostPersistence = bbsPostPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.sdr.bbs.model.BbsPost",
            bbsPostLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.sdr.bbs.model.BbsPost");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return BbsPost.class;
    }

    protected String getModelClassName() {
        return BbsPost.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = bbsPostPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
