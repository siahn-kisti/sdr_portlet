package com.sdr.bbs.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.bbs.model.BbsPost;
import com.sdr.bbs.model.BbsPostModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the BbsPost service. Represents a row in the &quot;sdr_bbs_BbsPost&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.bbs.model.BbsPostModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BbsPostImpl}.
 * </p>
 *
 * @author goopsw
 * @see BbsPostImpl
 * @see com.sdr.bbs.model.BbsPost
 * @see com.sdr.bbs.model.BbsPostModel
 * @generated
 */
public class BbsPostModelImpl extends BaseModelImpl<BbsPost>
    implements BbsPostModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a bbs post model instance should use the {@link com.sdr.bbs.model.BbsPost} interface instead.
     */
    public static final String TABLE_NAME = "sdr_bbs_BbsPost";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "postId", Types.BIGINT },
            { "bbsId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "writer", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "password_", Types.VARCHAR },
            { "title", Types.VARCHAR },
            { "content", Types.VARCHAR },
            { "secret", Types.BOOLEAN },
            { "commentEmailed", Types.BOOLEAN },
            { "viewCount", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table sdr_bbs_BbsPost (uuid_ VARCHAR(75) null,postId LONG not null primary key,bbsId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,writer VARCHAR(75) null,email VARCHAR(75) null,password_ VARCHAR(75) null,title VARCHAR(75) null,content VARCHAR(2000) null,secret BOOLEAN,commentEmailed BOOLEAN,viewCount INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table sdr_bbs_BbsPost";
    public static final String ORDER_BY_JPQL = " ORDER BY bbsPost.postId DESC";
    public static final String ORDER_BY_SQL = " ORDER BY sdr_bbs_BbsPost.postId DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.bbs.model.BbsPost"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.bbs.model.BbsPost"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.bbs.model.BbsPost"),
            true);
    public static long BBSID_COLUMN_BITMASK = 1L;
    public static long CONTENT_COLUMN_BITMASK = 2L;
    public static long TITLE_COLUMN_BITMASK = 4L;
    public static long UUID_COLUMN_BITMASK = 8L;
    public static long WRITER_COLUMN_BITMASK = 16L;
    public static long POSTID_COLUMN_BITMASK = 32L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.bbs.model.BbsPost"));
    private static ClassLoader _classLoader = BbsPost.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            BbsPost.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _postId;
    private long _bbsId;
    private long _originalBbsId;
    private boolean _setOriginalBbsId;
    private long _userId;
    private String _userUuid;
    private Date _createDate;
    private Date _modifiedDate;
    private String _writer;
    private String _originalWriter;
    private String _email;
    private String _password;
    private String _title;
    private String _originalTitle;
    private String _content;
    private String _originalContent;
    private boolean _secret;
    private boolean _commentEmailed;
    private int _viewCount;
    private long _columnBitmask;
    private BbsPost _escapedModel;

    public BbsPostModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _postId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPostId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _postId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return BbsPost.class;
    }

    @Override
    public String getModelClassName() {
        return BbsPost.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("postId", getPostId());
        attributes.put("bbsId", getBbsId());
        attributes.put("userId", getUserId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("writer", getWriter());
        attributes.put("email", getEmail());
        attributes.put("password", getPassword());
        attributes.put("title", getTitle());
        attributes.put("content", getContent());
        attributes.put("secret", getSecret());
        attributes.put("commentEmailed", getCommentEmailed());
        attributes.put("viewCount", getViewCount());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long postId = (Long) attributes.get("postId");

        if (postId != null) {
            setPostId(postId);
        }

        Long bbsId = (Long) attributes.get("bbsId");

        if (bbsId != null) {
            setBbsId(bbsId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String writer = (String) attributes.get("writer");

        if (writer != null) {
            setWriter(writer);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String password = (String) attributes.get("password");

        if (password != null) {
            setPassword(password);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        Boolean secret = (Boolean) attributes.get("secret");

        if (secret != null) {
            setSecret(secret);
        }

        Boolean commentEmailed = (Boolean) attributes.get("commentEmailed");

        if (commentEmailed != null) {
            setCommentEmailed(commentEmailed);
        }

        Integer viewCount = (Integer) attributes.get("viewCount");

        if (viewCount != null) {
            setViewCount(viewCount);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getPostId() {
        return _postId;
    }

    @Override
    public void setPostId(long postId) {
        _columnBitmask = -1L;

        _postId = postId;
    }

    @Override
    public long getBbsId() {
        return _bbsId;
    }

    @Override
    public void setBbsId(long bbsId) {
        _columnBitmask |= BBSID_COLUMN_BITMASK;

        if (!_setOriginalBbsId) {
            _setOriginalBbsId = true;

            _originalBbsId = _bbsId;
        }

        _bbsId = bbsId;
    }

    public long getOriginalBbsId() {
        return _originalBbsId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getWriter() {
        if (_writer == null) {
            return StringPool.BLANK;
        } else {
            return _writer;
        }
    }

    @Override
    public void setWriter(String writer) {
        _columnBitmask |= WRITER_COLUMN_BITMASK;

        if (_originalWriter == null) {
            _originalWriter = _writer;
        }

        _writer = writer;
    }

    public String getOriginalWriter() {
        return GetterUtil.getString(_originalWriter);
    }

    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @Override
    public String getPassword() {
        if (_password == null) {
            return StringPool.BLANK;
        } else {
            return _password;
        }
    }

    @Override
    public void setPassword(String password) {
        _password = password;
    }

    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _columnBitmask |= TITLE_COLUMN_BITMASK;

        if (_originalTitle == null) {
            _originalTitle = _title;
        }

        _title = title;
    }

    public String getOriginalTitle() {
        return GetterUtil.getString(_originalTitle);
    }

    @Override
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    @Override
    public void setContent(String content) {
        _columnBitmask |= CONTENT_COLUMN_BITMASK;

        if (_originalContent == null) {
            _originalContent = _content;
        }

        _content = content;
    }

    public String getOriginalContent() {
        return GetterUtil.getString(_originalContent);
    }

    @Override
    public boolean getSecret() {
        return _secret;
    }

    @Override
    public boolean isSecret() {
        return _secret;
    }

    @Override
    public void setSecret(boolean secret) {
        _secret = secret;
    }

    @Override
    public boolean getCommentEmailed() {
        return _commentEmailed;
    }

    @Override
    public boolean isCommentEmailed() {
        return _commentEmailed;
    }

    @Override
    public void setCommentEmailed(boolean commentEmailed) {
        _commentEmailed = commentEmailed;
    }

    @Override
    public int getViewCount() {
        return _viewCount;
    }

    @Override
    public void setViewCount(int viewCount) {
        _viewCount = viewCount;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            BbsPost.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public BbsPost toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (BbsPost) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BbsPostImpl bbsPostImpl = new BbsPostImpl();

        bbsPostImpl.setUuid(getUuid());
        bbsPostImpl.setPostId(getPostId());
        bbsPostImpl.setBbsId(getBbsId());
        bbsPostImpl.setUserId(getUserId());
        bbsPostImpl.setCreateDate(getCreateDate());
        bbsPostImpl.setModifiedDate(getModifiedDate());
        bbsPostImpl.setWriter(getWriter());
        bbsPostImpl.setEmail(getEmail());
        bbsPostImpl.setPassword(getPassword());
        bbsPostImpl.setTitle(getTitle());
        bbsPostImpl.setContent(getContent());
        bbsPostImpl.setSecret(getSecret());
        bbsPostImpl.setCommentEmailed(getCommentEmailed());
        bbsPostImpl.setViewCount(getViewCount());

        bbsPostImpl.resetOriginalValues();

        return bbsPostImpl;
    }

    @Override
    public int compareTo(BbsPost bbsPost) {
        int value = 0;

        if (getPostId() < bbsPost.getPostId()) {
            value = -1;
        } else if (getPostId() > bbsPost.getPostId()) {
            value = 1;
        } else {
            value = 0;
        }

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof BbsPost)) {
            return false;
        }

        BbsPost bbsPost = (BbsPost) obj;

        long primaryKey = bbsPost.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        BbsPostModelImpl bbsPostModelImpl = this;

        bbsPostModelImpl._originalUuid = bbsPostModelImpl._uuid;

        bbsPostModelImpl._originalBbsId = bbsPostModelImpl._bbsId;

        bbsPostModelImpl._setOriginalBbsId = false;

        bbsPostModelImpl._originalWriter = bbsPostModelImpl._writer;

        bbsPostModelImpl._originalTitle = bbsPostModelImpl._title;

        bbsPostModelImpl._originalContent = bbsPostModelImpl._content;

        bbsPostModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<BbsPost> toCacheModel() {
        BbsPostCacheModel bbsPostCacheModel = new BbsPostCacheModel();

        bbsPostCacheModel.uuid = getUuid();

        String uuid = bbsPostCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            bbsPostCacheModel.uuid = null;
        }

        bbsPostCacheModel.postId = getPostId();

        bbsPostCacheModel.bbsId = getBbsId();

        bbsPostCacheModel.userId = getUserId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            bbsPostCacheModel.createDate = createDate.getTime();
        } else {
            bbsPostCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            bbsPostCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            bbsPostCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        bbsPostCacheModel.writer = getWriter();

        String writer = bbsPostCacheModel.writer;

        if ((writer != null) && (writer.length() == 0)) {
            bbsPostCacheModel.writer = null;
        }

        bbsPostCacheModel.email = getEmail();

        String email = bbsPostCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            bbsPostCacheModel.email = null;
        }

        bbsPostCacheModel.password = getPassword();

        String password = bbsPostCacheModel.password;

        if ((password != null) && (password.length() == 0)) {
            bbsPostCacheModel.password = null;
        }

        bbsPostCacheModel.title = getTitle();

        String title = bbsPostCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            bbsPostCacheModel.title = null;
        }

        bbsPostCacheModel.content = getContent();

        String content = bbsPostCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            bbsPostCacheModel.content = null;
        }

        bbsPostCacheModel.secret = getSecret();

        bbsPostCacheModel.commentEmailed = getCommentEmailed();

        bbsPostCacheModel.viewCount = getViewCount();

        return bbsPostCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(29);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", postId=");
        sb.append(getPostId());
        sb.append(", bbsId=");
        sb.append(getBbsId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", writer=");
        sb.append(getWriter());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", password=");
        sb.append(getPassword());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", secret=");
        sb.append(getSecret());
        sb.append(", commentEmailed=");
        sb.append(getCommentEmailed());
        sb.append(", viewCount=");
        sb.append(getViewCount());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(46);

        sb.append("<model><model-name>");
        sb.append("com.sdr.bbs.model.BbsPost");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>postId</column-name><column-value><![CDATA[");
        sb.append(getPostId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bbsId</column-name><column-value><![CDATA[");
        sb.append(getBbsId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>writer</column-name><column-value><![CDATA[");
        sb.append(getWriter());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>password</column-name><column-value><![CDATA[");
        sb.append(getPassword());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>secret</column-name><column-value><![CDATA[");
        sb.append(getSecret());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>commentEmailed</column-name><column-value><![CDATA[");
        sb.append(getCommentEmailed());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>viewCount</column-name><column-value><![CDATA[");
        sb.append(getViewCount());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
