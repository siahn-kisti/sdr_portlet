package com.sdr.guide.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetLinkPersistence;

import com.sdr.guide.model.Guide;
import com.sdr.guide.service.GuideLocalService;
import com.sdr.guide.service.persistence.GuidePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the guide local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sdr.guide.service.impl.GuideLocalServiceImpl}.
 * </p>
 *
 * @author heesangbb
 * @see com.sdr.guide.service.impl.GuideLocalServiceImpl
 * @see com.sdr.guide.service.GuideLocalServiceUtil
 * @generated
 */
public abstract class GuideLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements GuideLocalService, IdentifiableBean {
    @BeanReference(type = com.sdr.guide.service.GuideLocalService.class)
    protected com.sdr.guide.service.GuideLocalService guideLocalService;
    @BeanReference(type = com.sdr.guide.service.GuideService.class)
    protected com.sdr.guide.service.GuideService guideService;
    @BeanReference(type = GuidePersistence.class)
    protected GuidePersistence guidePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetLinkLocalService.class)
    protected com.liferay.portlet.asset.service.AssetLinkLocalService assetLinkLocalService;
    @BeanReference(type = AssetLinkPersistence.class)
    protected AssetLinkPersistence assetLinkPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private GuideLocalServiceClpInvoker _clpInvoker = new GuideLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.sdr.guide.service.GuideLocalServiceUtil} to access the guide local service.
     */

    /**
     * Adds the guide to the database. Also notifies the appropriate model listeners.
     *
     * @param guide the guide
     * @return the guide that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Guide addGuide(Guide guide) throws SystemException {
        guide.setNew(true);

        return guidePersistence.update(guide);
    }

    /**
     * Creates a new guide with the primary key. Does not add the guide to the database.
     *
     * @param datasetId the primary key for the new guide
     * @return the new guide
     */
    @Override
    public Guide createGuide(long datasetId) {
        return guidePersistence.create(datasetId);
    }

    /**
     * Deletes the guide with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param datasetId the primary key of the guide
     * @return the guide that was removed
     * @throws PortalException if a guide with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Guide deleteGuide(long datasetId)
        throws PortalException, SystemException {
        return guidePersistence.remove(datasetId);
    }

    /**
     * Deletes the guide from the database. Also notifies the appropriate model listeners.
     *
     * @param guide the guide
     * @return the guide that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Guide deleteGuide(Guide guide) throws SystemException {
        return guidePersistence.remove(guide);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Guide.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return guidePersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sdr.guide.model.impl.GuideModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return guidePersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sdr.guide.model.impl.GuideModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return guidePersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return guidePersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return guidePersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Guide fetchGuide(long datasetId) throws SystemException {
        return guidePersistence.fetchByPrimaryKey(datasetId);
    }

    /**
     * Returns the guide with the matching UUID and company.
     *
     * @param uuid the guide's UUID
     * @param  companyId the primary key of the company
     * @return the matching guide, or <code>null</code> if a matching guide could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Guide fetchGuideByUuidAndCompanyId(String uuid, long companyId)
        throws SystemException {
        return guidePersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the guide matching the UUID and group.
     *
     * @param uuid the guide's UUID
     * @param groupId the primary key of the group
     * @return the matching guide, or <code>null</code> if a matching guide could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Guide fetchGuideByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return guidePersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the guide with the primary key.
     *
     * @param datasetId the primary key of the guide
     * @return the guide
     * @throws PortalException if a guide with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Guide getGuide(long datasetId)
        throws PortalException, SystemException {
        return guidePersistence.findByPrimaryKey(datasetId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return guidePersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the guide with the matching UUID and company.
     *
     * @param uuid the guide's UUID
     * @param  companyId the primary key of the company
     * @return the matching guide
     * @throws PortalException if a matching guide could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Guide getGuideByUuidAndCompanyId(String uuid, long companyId)
        throws PortalException, SystemException {
        return guidePersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the guide matching the UUID and group.
     *
     * @param uuid the guide's UUID
     * @param groupId the primary key of the group
     * @return the matching guide
     * @throws PortalException if a matching guide could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Guide getGuideByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return guidePersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the guides.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sdr.guide.model.impl.GuideModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of guides
     * @param end the upper bound of the range of guides (not inclusive)
     * @return the range of guides
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Guide> getGuides(int start, int end) throws SystemException {
        return guidePersistence.findAll(start, end);
    }

    /**
     * Returns the number of guides.
     *
     * @return the number of guides
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getGuidesCount() throws SystemException {
        return guidePersistence.countAll();
    }

    /**
     * Updates the guide in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param guide the guide
     * @return the guide that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Guide updateGuide(Guide guide) throws SystemException {
        return guidePersistence.update(guide);
    }

    /**
     * Returns the guide local service.
     *
     * @return the guide local service
     */
    public com.sdr.guide.service.GuideLocalService getGuideLocalService() {
        return guideLocalService;
    }

    /**
     * Sets the guide local service.
     *
     * @param guideLocalService the guide local service
     */
    public void setGuideLocalService(
        com.sdr.guide.service.GuideLocalService guideLocalService) {
        this.guideLocalService = guideLocalService;
    }

    /**
     * Returns the guide remote service.
     *
     * @return the guide remote service
     */
    public com.sdr.guide.service.GuideService getGuideService() {
        return guideService;
    }

    /**
     * Sets the guide remote service.
     *
     * @param guideService the guide remote service
     */
    public void setGuideService(com.sdr.guide.service.GuideService guideService) {
        this.guideService = guideService;
    }

    /**
     * Returns the guide persistence.
     *
     * @return the guide persistence
     */
    public GuidePersistence getGuidePersistence() {
        return guidePersistence;
    }

    /**
     * Sets the guide persistence.
     *
     * @param guidePersistence the guide persistence
     */
    public void setGuidePersistence(GuidePersistence guidePersistence) {
        this.guidePersistence = guidePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Returns the asset link local service.
     *
     * @return the asset link local service
     */
    public com.liferay.portlet.asset.service.AssetLinkLocalService getAssetLinkLocalService() {
        return assetLinkLocalService;
    }

    /**
     * Sets the asset link local service.
     *
     * @param assetLinkLocalService the asset link local service
     */
    public void setAssetLinkLocalService(
        com.liferay.portlet.asset.service.AssetLinkLocalService assetLinkLocalService) {
        this.assetLinkLocalService = assetLinkLocalService;
    }

    /**
     * Returns the asset link persistence.
     *
     * @return the asset link persistence
     */
    public AssetLinkPersistence getAssetLinkPersistence() {
        return assetLinkPersistence;
    }

    /**
     * Sets the asset link persistence.
     *
     * @param assetLinkPersistence the asset link persistence
     */
    public void setAssetLinkPersistence(
        AssetLinkPersistence assetLinkPersistence) {
        this.assetLinkPersistence = assetLinkPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.sdr.guide.model.Guide",
            guideLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.sdr.guide.model.Guide");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Guide.class;
    }

    protected String getModelClassName() {
        return Guide.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = guidePersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
