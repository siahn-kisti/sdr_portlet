package com.sdr.guide.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sdr.guide.model.Guide;
import com.sdr.guide.model.GuideModel;
import com.sdr.guide.model.GuideSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Guide service. Represents a row in the &quot;test_Guide&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.guide.model.GuideModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GuideImpl}.
 * </p>
 *
 * @author heesangbb
 * @see GuideImpl
 * @see com.sdr.guide.model.Guide
 * @see com.sdr.guide.model.GuideModel
 * @generated
 */
@JSON(strict = true)
public class GuideModelImpl extends BaseModelImpl<Guide> implements GuideModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a guide model instance should use the {@link com.sdr.guide.model.Guide} interface instead.
     */
    public static final String TABLE_NAME = "test_Guide";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "datasetId", Types.BIGINT },
            { "title", Types.VARCHAR },
            { "dataType", Types.VARCHAR },
            { "contributors", Types.VARCHAR },
            { "collectionName", Types.VARCHAR },
            { "keyword", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "dataFileId", Types.BIGINT },
            { "dataFileName", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "deleteDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table test_Guide (uuid_ VARCHAR(75) null,datasetId LONG not null primary key,title VARCHAR(75) null,dataType VARCHAR(75) null,contributors VARCHAR(75) null,collectionName VARCHAR(75) null,keyword VARCHAR(75) null,description VARCHAR(75) null,dataFileId LONG,dataFileName VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,deleteDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table test_Guide";
    public static final String ORDER_BY_JPQL = " ORDER BY guide.datasetId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY test_Guide.datasetId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.guide.model.Guide"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.guide.model.Guide"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.sdr.guide.model.Guide"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long UUID_COLUMN_BITMASK = 4L;
    public static long DATASETID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.guide.model.Guide"));
    private static ClassLoader _classLoader = Guide.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Guide.class };
    private String _uuid;
    private String _originalUuid;
    private long _datasetId;
    private String _title;
    private String _dataType;
    private String _contributors;
    private String _collectionName;
    private String _keyword;
    private String _description;
    private Long _dataFileId;
    private String _dataFileName;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private Date _deleteDate;
    private long _columnBitmask;
    private Guide _escapedModel;

    public GuideModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Guide toModel(GuideSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Guide model = new GuideImpl();

        model.setUuid(soapModel.getUuid());
        model.setDatasetId(soapModel.getDatasetId());
        model.setTitle(soapModel.getTitle());
        model.setDataType(soapModel.getDataType());
        model.setContributors(soapModel.getContributors());
        model.setCollectionName(soapModel.getCollectionName());
        model.setKeyword(soapModel.getKeyword());
        model.setDescription(soapModel.getDescription());
        model.setDataFileId(soapModel.getDataFileId());
        model.setDataFileName(soapModel.getDataFileName());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setDeleteDate(soapModel.getDeleteDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Guide> toModels(GuideSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Guide> models = new ArrayList<Guide>(soapModels.length);

        for (GuideSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _datasetId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setDatasetId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _datasetId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Guide.class;
    }

    @Override
    public String getModelClassName() {
        return Guide.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("datasetId", getDatasetId());
        attributes.put("title", getTitle());
        attributes.put("dataType", getDataType());
        attributes.put("contributors", getContributors());
        attributes.put("collectionName", getCollectionName());
        attributes.put("keyword", getKeyword());
        attributes.put("description", getDescription());
        attributes.put("dataFileId", getDataFileId());
        attributes.put("dataFileName", getDataFileName());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("deleteDate", getDeleteDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long datasetId = (Long) attributes.get("datasetId");

        if (datasetId != null) {
            setDatasetId(datasetId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String dataType = (String) attributes.get("dataType");

        if (dataType != null) {
            setDataType(dataType);
        }

        String contributors = (String) attributes.get("contributors");

        if (contributors != null) {
            setContributors(contributors);
        }

        String collectionName = (String) attributes.get("collectionName");

        if (collectionName != null) {
            setCollectionName(collectionName);
        }

        String keyword = (String) attributes.get("keyword");

        if (keyword != null) {
            setKeyword(keyword);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Long dataFileId = (Long) attributes.get("dataFileId");

        if (dataFileId != null) {
            setDataFileId(dataFileId);
        }

        String dataFileName = (String) attributes.get("dataFileName");

        if (dataFileName != null) {
            setDataFileName(dataFileName);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Date deleteDate = (Date) attributes.get("deleteDate");

        if (deleteDate != null) {
            setDeleteDate(deleteDate);
        }
    }

    @JSON
    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @JSON
    @Override
    public long getDatasetId() {
        return _datasetId;
    }

    @Override
    public void setDatasetId(long datasetId) {
        _datasetId = datasetId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getDataType() {
        if (_dataType == null) {
            return StringPool.BLANK;
        } else {
            return _dataType;
        }
    }

    @Override
    public void setDataType(String dataType) {
        _dataType = dataType;
    }

    @JSON
    @Override
    public String getContributors() {
        if (_contributors == null) {
            return StringPool.BLANK;
        } else {
            return _contributors;
        }
    }

    @Override
    public void setContributors(String contributors) {
        _contributors = contributors;
    }

    @JSON
    @Override
    public String getCollectionName() {
        if (_collectionName == null) {
            return StringPool.BLANK;
        } else {
            return _collectionName;
        }
    }

    @Override
    public void setCollectionName(String collectionName) {
        _collectionName = collectionName;
    }

    @JSON
    @Override
    public String getKeyword() {
        if (_keyword == null) {
            return StringPool.BLANK;
        } else {
            return _keyword;
        }
    }

    @Override
    public void setKeyword(String keyword) {
        _keyword = keyword;
    }

    @JSON
    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @JSON
    @Override
    public Long getDataFileId() {
        return _dataFileId;
    }

    @Override
    public void setDataFileId(Long dataFileId) {
        _dataFileId = dataFileId;
    }

    @JSON
    @Override
    public String getDataFileName() {
        if (_dataFileName == null) {
            return StringPool.BLANK;
        } else {
            return _dataFileName;
        }
    }

    @Override
    public void setDataFileName(String dataFileName) {
        _dataFileName = dataFileName;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public Date getDeleteDate() {
        return _deleteDate;
    }

    @Override
    public void setDeleteDate(Date deleteDate) {
        _deleteDate = deleteDate;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                Guide.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Guide.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Guide toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Guide) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        GuideImpl guideImpl = new GuideImpl();

        guideImpl.setUuid(getUuid());
        guideImpl.setDatasetId(getDatasetId());
        guideImpl.setTitle(getTitle());
        guideImpl.setDataType(getDataType());
        guideImpl.setContributors(getContributors());
        guideImpl.setCollectionName(getCollectionName());
        guideImpl.setKeyword(getKeyword());
        guideImpl.setDescription(getDescription());
        guideImpl.setDataFileId(getDataFileId());
        guideImpl.setDataFileName(getDataFileName());
        guideImpl.setGroupId(getGroupId());
        guideImpl.setCompanyId(getCompanyId());
        guideImpl.setUserId(getUserId());
        guideImpl.setUserName(getUserName());
        guideImpl.setCreateDate(getCreateDate());
        guideImpl.setModifiedDate(getModifiedDate());
        guideImpl.setDeleteDate(getDeleteDate());

        guideImpl.resetOriginalValues();

        return guideImpl;
    }

    @Override
    public int compareTo(Guide guide) {
        long primaryKey = guide.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Guide)) {
            return false;
        }

        Guide guide = (Guide) obj;

        long primaryKey = guide.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        GuideModelImpl guideModelImpl = this;

        guideModelImpl._originalUuid = guideModelImpl._uuid;

        guideModelImpl._originalGroupId = guideModelImpl._groupId;

        guideModelImpl._setOriginalGroupId = false;

        guideModelImpl._originalCompanyId = guideModelImpl._companyId;

        guideModelImpl._setOriginalCompanyId = false;

        guideModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Guide> toCacheModel() {
        GuideCacheModel guideCacheModel = new GuideCacheModel();

        guideCacheModel.uuid = getUuid();

        String uuid = guideCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            guideCacheModel.uuid = null;
        }

        guideCacheModel.datasetId = getDatasetId();

        guideCacheModel.title = getTitle();

        String title = guideCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            guideCacheModel.title = null;
        }

        guideCacheModel.dataType = getDataType();

        String dataType = guideCacheModel.dataType;

        if ((dataType != null) && (dataType.length() == 0)) {
            guideCacheModel.dataType = null;
        }

        guideCacheModel.contributors = getContributors();

        String contributors = guideCacheModel.contributors;

        if ((contributors != null) && (contributors.length() == 0)) {
            guideCacheModel.contributors = null;
        }

        guideCacheModel.collectionName = getCollectionName();

        String collectionName = guideCacheModel.collectionName;

        if ((collectionName != null) && (collectionName.length() == 0)) {
            guideCacheModel.collectionName = null;
        }

        guideCacheModel.keyword = getKeyword();

        String keyword = guideCacheModel.keyword;

        if ((keyword != null) && (keyword.length() == 0)) {
            guideCacheModel.keyword = null;
        }

        guideCacheModel.description = getDescription();

        String description = guideCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            guideCacheModel.description = null;
        }

        guideCacheModel.dataFileId = getDataFileId();

        guideCacheModel.dataFileName = getDataFileName();

        String dataFileName = guideCacheModel.dataFileName;

        if ((dataFileName != null) && (dataFileName.length() == 0)) {
            guideCacheModel.dataFileName = null;
        }

        guideCacheModel.groupId = getGroupId();

        guideCacheModel.companyId = getCompanyId();

        guideCacheModel.userId = getUserId();

        guideCacheModel.userName = getUserName();

        String userName = guideCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            guideCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            guideCacheModel.createDate = createDate.getTime();
        } else {
            guideCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            guideCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            guideCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        Date deleteDate = getDeleteDate();

        if (deleteDate != null) {
            guideCacheModel.deleteDate = deleteDate.getTime();
        } else {
            guideCacheModel.deleteDate = Long.MIN_VALUE;
        }

        return guideCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(35);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", datasetId=");
        sb.append(getDatasetId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", dataType=");
        sb.append(getDataType());
        sb.append(", contributors=");
        sb.append(getContributors());
        sb.append(", collectionName=");
        sb.append(getCollectionName());
        sb.append(", keyword=");
        sb.append(getKeyword());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", dataFileId=");
        sb.append(getDataFileId());
        sb.append(", dataFileName=");
        sb.append(getDataFileName());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", deleteDate=");
        sb.append(getDeleteDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(55);

        sb.append("<model><model-name>");
        sb.append("com.sdr.guide.model.Guide");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>datasetId</column-name><column-value><![CDATA[");
        sb.append(getDatasetId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataType</column-name><column-value><![CDATA[");
        sb.append(getDataType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contributors</column-name><column-value><![CDATA[");
        sb.append(getContributors());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>collectionName</column-name><column-value><![CDATA[");
        sb.append(getCollectionName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>keyword</column-name><column-value><![CDATA[");
        sb.append(getKeyword());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataFileId</column-name><column-value><![CDATA[");
        sb.append(getDataFileId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dataFileName</column-name><column-value><![CDATA[");
        sb.append(getDataFileName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deleteDate</column-name><column-value><![CDATA[");
        sb.append(getDeleteDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
